// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"segFault/PaddyDiseaseDetection/ent/disease"
	"segFault/PaddyDiseaseDetection/ent/diseaseidentified"
	"segFault/PaddyDiseaseDetection/ent/image"
	"segFault/PaddyDiseaseDetection/ent/predicate"
	"segFault/PaddyDiseaseDetection/ent/solution"
	"segFault/PaddyDiseaseDetection/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDisease           = "Disease"
	TypeDiseaseIdentified = "DiseaseIdentified"
	TypeImage             = "Image"
	TypeSolution          = "Solution"
	TypeUser              = "User"
)

// DiseaseMutation represents an operation that mutates the Disease nodes in the graph.
type DiseaseMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	name                      *string
	photos                    *[]string
	appendphotos              []string
	clearedFields             map[string]struct{}
	solutions                 map[uuid.UUID]struct{}
	removedsolutions          map[uuid.UUID]struct{}
	clearedsolutions          bool
	disease_identified        map[uuid.UUID]struct{}
	removeddisease_identified map[uuid.UUID]struct{}
	cleareddisease_identified bool
	done                      bool
	oldValue                  func(context.Context) (*Disease, error)
	predicates                []predicate.Disease
}

var _ ent.Mutation = (*DiseaseMutation)(nil)

// diseaseOption allows management of the mutation configuration using functional options.
type diseaseOption func(*DiseaseMutation)

// newDiseaseMutation creates new mutation for the Disease entity.
func newDiseaseMutation(c config, op Op, opts ...diseaseOption) *DiseaseMutation {
	m := &DiseaseMutation{
		config:        c,
		op:            op,
		typ:           TypeDisease,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiseaseID sets the ID field of the mutation.
func withDiseaseID(id uuid.UUID) diseaseOption {
	return func(m *DiseaseMutation) {
		var (
			err   error
			once  sync.Once
			value *Disease
		)
		m.oldValue = func(ctx context.Context) (*Disease, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Disease.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDisease sets the old Disease of the mutation.
func withDisease(node *Disease) diseaseOption {
	return func(m *DiseaseMutation) {
		m.oldValue = func(context.Context) (*Disease, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiseaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiseaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Disease entities.
func (m *DiseaseMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DiseaseMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DiseaseMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Disease.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *DiseaseMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DiseaseMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Disease entity.
// If the Disease object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiseaseMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DiseaseMutation) ResetName() {
	m.name = nil
}

// SetPhotos sets the "photos" field.
func (m *DiseaseMutation) SetPhotos(s []string) {
	m.photos = &s
	m.appendphotos = nil
}

// Photos returns the value of the "photos" field in the mutation.
func (m *DiseaseMutation) Photos() (r []string, exists bool) {
	v := m.photos
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotos returns the old "photos" field's value of the Disease entity.
// If the Disease object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiseaseMutation) OldPhotos(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotos is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotos requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotos: %w", err)
	}
	return oldValue.Photos, nil
}

// AppendPhotos adds s to the "photos" field.
func (m *DiseaseMutation) AppendPhotos(s []string) {
	m.appendphotos = append(m.appendphotos, s...)
}

// AppendedPhotos returns the list of values that were appended to the "photos" field in this mutation.
func (m *DiseaseMutation) AppendedPhotos() ([]string, bool) {
	if len(m.appendphotos) == 0 {
		return nil, false
	}
	return m.appendphotos, true
}

// ResetPhotos resets all changes to the "photos" field.
func (m *DiseaseMutation) ResetPhotos() {
	m.photos = nil
	m.appendphotos = nil
}

// AddSolutionIDs adds the "solutions" edge to the Solution entity by ids.
func (m *DiseaseMutation) AddSolutionIDs(ids ...uuid.UUID) {
	if m.solutions == nil {
		m.solutions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.solutions[ids[i]] = struct{}{}
	}
}

// ClearSolutions clears the "solutions" edge to the Solution entity.
func (m *DiseaseMutation) ClearSolutions() {
	m.clearedsolutions = true
}

// SolutionsCleared reports if the "solutions" edge to the Solution entity was cleared.
func (m *DiseaseMutation) SolutionsCleared() bool {
	return m.clearedsolutions
}

// RemoveSolutionIDs removes the "solutions" edge to the Solution entity by IDs.
func (m *DiseaseMutation) RemoveSolutionIDs(ids ...uuid.UUID) {
	if m.removedsolutions == nil {
		m.removedsolutions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.solutions, ids[i])
		m.removedsolutions[ids[i]] = struct{}{}
	}
}

// RemovedSolutions returns the removed IDs of the "solutions" edge to the Solution entity.
func (m *DiseaseMutation) RemovedSolutionsIDs() (ids []uuid.UUID) {
	for id := range m.removedsolutions {
		ids = append(ids, id)
	}
	return
}

// SolutionsIDs returns the "solutions" edge IDs in the mutation.
func (m *DiseaseMutation) SolutionsIDs() (ids []uuid.UUID) {
	for id := range m.solutions {
		ids = append(ids, id)
	}
	return
}

// ResetSolutions resets all changes to the "solutions" edge.
func (m *DiseaseMutation) ResetSolutions() {
	m.solutions = nil
	m.clearedsolutions = false
	m.removedsolutions = nil
}

// AddDiseaseIdentifiedIDs adds the "disease_identified" edge to the DiseaseIdentified entity by ids.
func (m *DiseaseMutation) AddDiseaseIdentifiedIDs(ids ...uuid.UUID) {
	if m.disease_identified == nil {
		m.disease_identified = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.disease_identified[ids[i]] = struct{}{}
	}
}

// ClearDiseaseIdentified clears the "disease_identified" edge to the DiseaseIdentified entity.
func (m *DiseaseMutation) ClearDiseaseIdentified() {
	m.cleareddisease_identified = true
}

// DiseaseIdentifiedCleared reports if the "disease_identified" edge to the DiseaseIdentified entity was cleared.
func (m *DiseaseMutation) DiseaseIdentifiedCleared() bool {
	return m.cleareddisease_identified
}

// RemoveDiseaseIdentifiedIDs removes the "disease_identified" edge to the DiseaseIdentified entity by IDs.
func (m *DiseaseMutation) RemoveDiseaseIdentifiedIDs(ids ...uuid.UUID) {
	if m.removeddisease_identified == nil {
		m.removeddisease_identified = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.disease_identified, ids[i])
		m.removeddisease_identified[ids[i]] = struct{}{}
	}
}

// RemovedDiseaseIdentified returns the removed IDs of the "disease_identified" edge to the DiseaseIdentified entity.
func (m *DiseaseMutation) RemovedDiseaseIdentifiedIDs() (ids []uuid.UUID) {
	for id := range m.removeddisease_identified {
		ids = append(ids, id)
	}
	return
}

// DiseaseIdentifiedIDs returns the "disease_identified" edge IDs in the mutation.
func (m *DiseaseMutation) DiseaseIdentifiedIDs() (ids []uuid.UUID) {
	for id := range m.disease_identified {
		ids = append(ids, id)
	}
	return
}

// ResetDiseaseIdentified resets all changes to the "disease_identified" edge.
func (m *DiseaseMutation) ResetDiseaseIdentified() {
	m.disease_identified = nil
	m.cleareddisease_identified = false
	m.removeddisease_identified = nil
}

// Where appends a list predicates to the DiseaseMutation builder.
func (m *DiseaseMutation) Where(ps ...predicate.Disease) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DiseaseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DiseaseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Disease, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DiseaseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DiseaseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Disease).
func (m *DiseaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DiseaseMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, disease.FieldName)
	}
	if m.photos != nil {
		fields = append(fields, disease.FieldPhotos)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DiseaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case disease.FieldName:
		return m.Name()
	case disease.FieldPhotos:
		return m.Photos()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DiseaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case disease.FieldName:
		return m.OldName(ctx)
	case disease.FieldPhotos:
		return m.OldPhotos(ctx)
	}
	return nil, fmt.Errorf("unknown Disease field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiseaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case disease.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case disease.FieldPhotos:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotos(v)
		return nil
	}
	return fmt.Errorf("unknown Disease field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DiseaseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DiseaseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiseaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Disease numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DiseaseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DiseaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiseaseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Disease nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DiseaseMutation) ResetField(name string) error {
	switch name {
	case disease.FieldName:
		m.ResetName()
		return nil
	case disease.FieldPhotos:
		m.ResetPhotos()
		return nil
	}
	return fmt.Errorf("unknown Disease field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DiseaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.solutions != nil {
		edges = append(edges, disease.EdgeSolutions)
	}
	if m.disease_identified != nil {
		edges = append(edges, disease.EdgeDiseaseIdentified)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DiseaseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case disease.EdgeSolutions:
		ids := make([]ent.Value, 0, len(m.solutions))
		for id := range m.solutions {
			ids = append(ids, id)
		}
		return ids
	case disease.EdgeDiseaseIdentified:
		ids := make([]ent.Value, 0, len(m.disease_identified))
		for id := range m.disease_identified {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DiseaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedsolutions != nil {
		edges = append(edges, disease.EdgeSolutions)
	}
	if m.removeddisease_identified != nil {
		edges = append(edges, disease.EdgeDiseaseIdentified)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DiseaseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case disease.EdgeSolutions:
		ids := make([]ent.Value, 0, len(m.removedsolutions))
		for id := range m.removedsolutions {
			ids = append(ids, id)
		}
		return ids
	case disease.EdgeDiseaseIdentified:
		ids := make([]ent.Value, 0, len(m.removeddisease_identified))
		for id := range m.removeddisease_identified {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DiseaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsolutions {
		edges = append(edges, disease.EdgeSolutions)
	}
	if m.cleareddisease_identified {
		edges = append(edges, disease.EdgeDiseaseIdentified)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DiseaseMutation) EdgeCleared(name string) bool {
	switch name {
	case disease.EdgeSolutions:
		return m.clearedsolutions
	case disease.EdgeDiseaseIdentified:
		return m.cleareddisease_identified
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DiseaseMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Disease unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DiseaseMutation) ResetEdge(name string) error {
	switch name {
	case disease.EdgeSolutions:
		m.ResetSolutions()
		return nil
	case disease.EdgeDiseaseIdentified:
		m.ResetDiseaseIdentified()
		return nil
	}
	return fmt.Errorf("unknown Disease edge %s", name)
}

// DiseaseIdentifiedMutation represents an operation that mutates the DiseaseIdentified nodes in the graph.
type DiseaseIdentifiedMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	location           *string
	severity           *int
	addseverity        *int
	created_at         *time.Time
	photos             *[]string
	appendphotos       []string
	status             *diseaseidentified.Status
	clearedFields      map[string]struct{}
	uploaded_by        *uuid.UUID
	cleareduploaded_by bool
	disease            map[uuid.UUID]struct{}
	removeddisease     map[uuid.UUID]struct{}
	cleareddisease     bool
	done               bool
	oldValue           func(context.Context) (*DiseaseIdentified, error)
	predicates         []predicate.DiseaseIdentified
}

var _ ent.Mutation = (*DiseaseIdentifiedMutation)(nil)

// diseaseidentifiedOption allows management of the mutation configuration using functional options.
type diseaseidentifiedOption func(*DiseaseIdentifiedMutation)

// newDiseaseIdentifiedMutation creates new mutation for the DiseaseIdentified entity.
func newDiseaseIdentifiedMutation(c config, op Op, opts ...diseaseidentifiedOption) *DiseaseIdentifiedMutation {
	m := &DiseaseIdentifiedMutation{
		config:        c,
		op:            op,
		typ:           TypeDiseaseIdentified,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiseaseIdentifiedID sets the ID field of the mutation.
func withDiseaseIdentifiedID(id uuid.UUID) diseaseidentifiedOption {
	return func(m *DiseaseIdentifiedMutation) {
		var (
			err   error
			once  sync.Once
			value *DiseaseIdentified
		)
		m.oldValue = func(ctx context.Context) (*DiseaseIdentified, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DiseaseIdentified.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDiseaseIdentified sets the old DiseaseIdentified of the mutation.
func withDiseaseIdentified(node *DiseaseIdentified) diseaseidentifiedOption {
	return func(m *DiseaseIdentifiedMutation) {
		m.oldValue = func(context.Context) (*DiseaseIdentified, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiseaseIdentifiedMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiseaseIdentifiedMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DiseaseIdentified entities.
func (m *DiseaseIdentifiedMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DiseaseIdentifiedMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DiseaseIdentifiedMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DiseaseIdentified.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLocation sets the "location" field.
func (m *DiseaseIdentifiedMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *DiseaseIdentifiedMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the DiseaseIdentified entity.
// If the DiseaseIdentified object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiseaseIdentifiedMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ResetLocation resets all changes to the "location" field.
func (m *DiseaseIdentifiedMutation) ResetLocation() {
	m.location = nil
}

// SetSeverity sets the "severity" field.
func (m *DiseaseIdentifiedMutation) SetSeverity(i int) {
	m.severity = &i
	m.addseverity = nil
}

// Severity returns the value of the "severity" field in the mutation.
func (m *DiseaseIdentifiedMutation) Severity() (r int, exists bool) {
	v := m.severity
	if v == nil {
		return
	}
	return *v, true
}

// OldSeverity returns the old "severity" field's value of the DiseaseIdentified entity.
// If the DiseaseIdentified object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiseaseIdentifiedMutation) OldSeverity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSeverity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSeverity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSeverity: %w", err)
	}
	return oldValue.Severity, nil
}

// AddSeverity adds i to the "severity" field.
func (m *DiseaseIdentifiedMutation) AddSeverity(i int) {
	if m.addseverity != nil {
		*m.addseverity += i
	} else {
		m.addseverity = &i
	}
}

// AddedSeverity returns the value that was added to the "severity" field in this mutation.
func (m *DiseaseIdentifiedMutation) AddedSeverity() (r int, exists bool) {
	v := m.addseverity
	if v == nil {
		return
	}
	return *v, true
}

// ResetSeverity resets all changes to the "severity" field.
func (m *DiseaseIdentifiedMutation) ResetSeverity() {
	m.severity = nil
	m.addseverity = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *DiseaseIdentifiedMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DiseaseIdentifiedMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DiseaseIdentified entity.
// If the DiseaseIdentified object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiseaseIdentifiedMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DiseaseIdentifiedMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetPhotos sets the "photos" field.
func (m *DiseaseIdentifiedMutation) SetPhotos(s []string) {
	m.photos = &s
	m.appendphotos = nil
}

// Photos returns the value of the "photos" field in the mutation.
func (m *DiseaseIdentifiedMutation) Photos() (r []string, exists bool) {
	v := m.photos
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotos returns the old "photos" field's value of the DiseaseIdentified entity.
// If the DiseaseIdentified object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiseaseIdentifiedMutation) OldPhotos(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotos is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotos requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotos: %w", err)
	}
	return oldValue.Photos, nil
}

// AppendPhotos adds s to the "photos" field.
func (m *DiseaseIdentifiedMutation) AppendPhotos(s []string) {
	m.appendphotos = append(m.appendphotos, s...)
}

// AppendedPhotos returns the list of values that were appended to the "photos" field in this mutation.
func (m *DiseaseIdentifiedMutation) AppendedPhotos() ([]string, bool) {
	if len(m.appendphotos) == 0 {
		return nil, false
	}
	return m.appendphotos, true
}

// ResetPhotos resets all changes to the "photos" field.
func (m *DiseaseIdentifiedMutation) ResetPhotos() {
	m.photos = nil
	m.appendphotos = nil
}

// SetStatus sets the "status" field.
func (m *DiseaseIdentifiedMutation) SetStatus(d diseaseidentified.Status) {
	m.status = &d
}

// Status returns the value of the "status" field in the mutation.
func (m *DiseaseIdentifiedMutation) Status() (r diseaseidentified.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the DiseaseIdentified entity.
// If the DiseaseIdentified object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiseaseIdentifiedMutation) OldStatus(ctx context.Context) (v diseaseidentified.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *DiseaseIdentifiedMutation) ResetStatus() {
	m.status = nil
}

// SetUploadedByID sets the "uploaded_by" edge to the User entity by id.
func (m *DiseaseIdentifiedMutation) SetUploadedByID(id uuid.UUID) {
	m.uploaded_by = &id
}

// ClearUploadedBy clears the "uploaded_by" edge to the User entity.
func (m *DiseaseIdentifiedMutation) ClearUploadedBy() {
	m.cleareduploaded_by = true
}

// UploadedByCleared reports if the "uploaded_by" edge to the User entity was cleared.
func (m *DiseaseIdentifiedMutation) UploadedByCleared() bool {
	return m.cleareduploaded_by
}

// UploadedByID returns the "uploaded_by" edge ID in the mutation.
func (m *DiseaseIdentifiedMutation) UploadedByID() (id uuid.UUID, exists bool) {
	if m.uploaded_by != nil {
		return *m.uploaded_by, true
	}
	return
}

// UploadedByIDs returns the "uploaded_by" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UploadedByID instead. It exists only for internal usage by the builders.
func (m *DiseaseIdentifiedMutation) UploadedByIDs() (ids []uuid.UUID) {
	if id := m.uploaded_by; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUploadedBy resets all changes to the "uploaded_by" edge.
func (m *DiseaseIdentifiedMutation) ResetUploadedBy() {
	m.uploaded_by = nil
	m.cleareduploaded_by = false
}

// AddDiseaseIDs adds the "disease" edge to the Disease entity by ids.
func (m *DiseaseIdentifiedMutation) AddDiseaseIDs(ids ...uuid.UUID) {
	if m.disease == nil {
		m.disease = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.disease[ids[i]] = struct{}{}
	}
}

// ClearDisease clears the "disease" edge to the Disease entity.
func (m *DiseaseIdentifiedMutation) ClearDisease() {
	m.cleareddisease = true
}

// DiseaseCleared reports if the "disease" edge to the Disease entity was cleared.
func (m *DiseaseIdentifiedMutation) DiseaseCleared() bool {
	return m.cleareddisease
}

// RemoveDiseaseIDs removes the "disease" edge to the Disease entity by IDs.
func (m *DiseaseIdentifiedMutation) RemoveDiseaseIDs(ids ...uuid.UUID) {
	if m.removeddisease == nil {
		m.removeddisease = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.disease, ids[i])
		m.removeddisease[ids[i]] = struct{}{}
	}
}

// RemovedDisease returns the removed IDs of the "disease" edge to the Disease entity.
func (m *DiseaseIdentifiedMutation) RemovedDiseaseIDs() (ids []uuid.UUID) {
	for id := range m.removeddisease {
		ids = append(ids, id)
	}
	return
}

// DiseaseIDs returns the "disease" edge IDs in the mutation.
func (m *DiseaseIdentifiedMutation) DiseaseIDs() (ids []uuid.UUID) {
	for id := range m.disease {
		ids = append(ids, id)
	}
	return
}

// ResetDisease resets all changes to the "disease" edge.
func (m *DiseaseIdentifiedMutation) ResetDisease() {
	m.disease = nil
	m.cleareddisease = false
	m.removeddisease = nil
}

// Where appends a list predicates to the DiseaseIdentifiedMutation builder.
func (m *DiseaseIdentifiedMutation) Where(ps ...predicate.DiseaseIdentified) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DiseaseIdentifiedMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DiseaseIdentifiedMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DiseaseIdentified, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DiseaseIdentifiedMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DiseaseIdentifiedMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DiseaseIdentified).
func (m *DiseaseIdentifiedMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DiseaseIdentifiedMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.location != nil {
		fields = append(fields, diseaseidentified.FieldLocation)
	}
	if m.severity != nil {
		fields = append(fields, diseaseidentified.FieldSeverity)
	}
	if m.created_at != nil {
		fields = append(fields, diseaseidentified.FieldCreatedAt)
	}
	if m.photos != nil {
		fields = append(fields, diseaseidentified.FieldPhotos)
	}
	if m.status != nil {
		fields = append(fields, diseaseidentified.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DiseaseIdentifiedMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case diseaseidentified.FieldLocation:
		return m.Location()
	case diseaseidentified.FieldSeverity:
		return m.Severity()
	case diseaseidentified.FieldCreatedAt:
		return m.CreatedAt()
	case diseaseidentified.FieldPhotos:
		return m.Photos()
	case diseaseidentified.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DiseaseIdentifiedMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case diseaseidentified.FieldLocation:
		return m.OldLocation(ctx)
	case diseaseidentified.FieldSeverity:
		return m.OldSeverity(ctx)
	case diseaseidentified.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case diseaseidentified.FieldPhotos:
		return m.OldPhotos(ctx)
	case diseaseidentified.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown DiseaseIdentified field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiseaseIdentifiedMutation) SetField(name string, value ent.Value) error {
	switch name {
	case diseaseidentified.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case diseaseidentified.FieldSeverity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSeverity(v)
		return nil
	case diseaseidentified.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case diseaseidentified.FieldPhotos:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotos(v)
		return nil
	case diseaseidentified.FieldStatus:
		v, ok := value.(diseaseidentified.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown DiseaseIdentified field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DiseaseIdentifiedMutation) AddedFields() []string {
	var fields []string
	if m.addseverity != nil {
		fields = append(fields, diseaseidentified.FieldSeverity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DiseaseIdentifiedMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case diseaseidentified.FieldSeverity:
		return m.AddedSeverity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiseaseIdentifiedMutation) AddField(name string, value ent.Value) error {
	switch name {
	case diseaseidentified.FieldSeverity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSeverity(v)
		return nil
	}
	return fmt.Errorf("unknown DiseaseIdentified numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DiseaseIdentifiedMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DiseaseIdentifiedMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiseaseIdentifiedMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DiseaseIdentified nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DiseaseIdentifiedMutation) ResetField(name string) error {
	switch name {
	case diseaseidentified.FieldLocation:
		m.ResetLocation()
		return nil
	case diseaseidentified.FieldSeverity:
		m.ResetSeverity()
		return nil
	case diseaseidentified.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case diseaseidentified.FieldPhotos:
		m.ResetPhotos()
		return nil
	case diseaseidentified.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown DiseaseIdentified field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DiseaseIdentifiedMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.uploaded_by != nil {
		edges = append(edges, diseaseidentified.EdgeUploadedBy)
	}
	if m.disease != nil {
		edges = append(edges, diseaseidentified.EdgeDisease)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DiseaseIdentifiedMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case diseaseidentified.EdgeUploadedBy:
		if id := m.uploaded_by; id != nil {
			return []ent.Value{*id}
		}
	case diseaseidentified.EdgeDisease:
		ids := make([]ent.Value, 0, len(m.disease))
		for id := range m.disease {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DiseaseIdentifiedMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeddisease != nil {
		edges = append(edges, diseaseidentified.EdgeDisease)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DiseaseIdentifiedMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case diseaseidentified.EdgeDisease:
		ids := make([]ent.Value, 0, len(m.removeddisease))
		for id := range m.removeddisease {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DiseaseIdentifiedMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduploaded_by {
		edges = append(edges, diseaseidentified.EdgeUploadedBy)
	}
	if m.cleareddisease {
		edges = append(edges, diseaseidentified.EdgeDisease)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DiseaseIdentifiedMutation) EdgeCleared(name string) bool {
	switch name {
	case diseaseidentified.EdgeUploadedBy:
		return m.cleareduploaded_by
	case diseaseidentified.EdgeDisease:
		return m.cleareddisease
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DiseaseIdentifiedMutation) ClearEdge(name string) error {
	switch name {
	case diseaseidentified.EdgeUploadedBy:
		m.ClearUploadedBy()
		return nil
	}
	return fmt.Errorf("unknown DiseaseIdentified unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DiseaseIdentifiedMutation) ResetEdge(name string) error {
	switch name {
	case diseaseidentified.EdgeUploadedBy:
		m.ResetUploadedBy()
		return nil
	case diseaseidentified.EdgeDisease:
		m.ResetDisease()
		return nil
	}
	return fmt.Errorf("unknown DiseaseIdentified edge %s", name)
}

// ImageMutation represents an operation that mutates the Image nodes in the graph.
type ImageMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	identifier    *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Image, error)
	predicates    []predicate.Image
}

var _ ent.Mutation = (*ImageMutation)(nil)

// imageOption allows management of the mutation configuration using functional options.
type imageOption func(*ImageMutation)

// newImageMutation creates new mutation for the Image entity.
func newImageMutation(c config, op Op, opts ...imageOption) *ImageMutation {
	m := &ImageMutation{
		config:        c,
		op:            op,
		typ:           TypeImage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withImageID sets the ID field of the mutation.
func withImageID(id uuid.UUID) imageOption {
	return func(m *ImageMutation) {
		var (
			err   error
			once  sync.Once
			value *Image
		)
		m.oldValue = func(ctx context.Context) (*Image, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Image.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withImage sets the old Image of the mutation.
func withImage(node *Image) imageOption {
	return func(m *ImageMutation) {
		m.oldValue = func(context.Context) (*Image, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ImageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ImageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Image entities.
func (m *ImageMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ImageMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ImageMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Image.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIdentifier sets the "identifier" field.
func (m *ImageMutation) SetIdentifier(s string) {
	m.identifier = &s
}

// Identifier returns the value of the "identifier" field in the mutation.
func (m *ImageMutation) Identifier() (r string, exists bool) {
	v := m.identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentifier returns the old "identifier" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentifier: %w", err)
	}
	return oldValue.Identifier, nil
}

// ResetIdentifier resets all changes to the "identifier" field.
func (m *ImageMutation) ResetIdentifier() {
	m.identifier = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ImageMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ImageMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ImageMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the ImageMutation builder.
func (m *ImageMutation) Where(ps ...predicate.Image) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ImageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ImageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Image, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ImageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ImageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Image).
func (m *ImageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ImageMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.identifier != nil {
		fields = append(fields, image.FieldIdentifier)
	}
	if m.created_at != nil {
		fields = append(fields, image.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ImageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case image.FieldIdentifier:
		return m.Identifier()
	case image.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ImageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case image.FieldIdentifier:
		return m.OldIdentifier(ctx)
	case image.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Image field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case image.FieldIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentifier(v)
		return nil
	case image.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Image field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ImageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ImageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Image numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ImageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ImageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ImageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Image nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ImageMutation) ResetField(name string) error {
	switch name {
	case image.FieldIdentifier:
		m.ResetIdentifier()
		return nil
	case image.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Image field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ImageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ImageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ImageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ImageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ImageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ImageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ImageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Image unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ImageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Image edge %s", name)
}

// SolutionMutation represents an operation that mutates the Solution nodes in the graph.
type SolutionMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	name              *string
	photos            *[]string
	appendphotos      []string
	description       *string
	ingredients       *[]string
	appendingredients []string
	clearedFields     map[string]struct{}
	disease           map[uuid.UUID]struct{}
	removeddisease    map[uuid.UUID]struct{}
	cleareddisease    bool
	done              bool
	oldValue          func(context.Context) (*Solution, error)
	predicates        []predicate.Solution
}

var _ ent.Mutation = (*SolutionMutation)(nil)

// solutionOption allows management of the mutation configuration using functional options.
type solutionOption func(*SolutionMutation)

// newSolutionMutation creates new mutation for the Solution entity.
func newSolutionMutation(c config, op Op, opts ...solutionOption) *SolutionMutation {
	m := &SolutionMutation{
		config:        c,
		op:            op,
		typ:           TypeSolution,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSolutionID sets the ID field of the mutation.
func withSolutionID(id uuid.UUID) solutionOption {
	return func(m *SolutionMutation) {
		var (
			err   error
			once  sync.Once
			value *Solution
		)
		m.oldValue = func(ctx context.Context) (*Solution, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Solution.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSolution sets the old Solution of the mutation.
func withSolution(node *Solution) solutionOption {
	return func(m *SolutionMutation) {
		m.oldValue = func(context.Context) (*Solution, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SolutionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SolutionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Solution entities.
func (m *SolutionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SolutionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SolutionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Solution.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *SolutionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SolutionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Solution entity.
// If the Solution object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SolutionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SolutionMutation) ResetName() {
	m.name = nil
}

// SetPhotos sets the "photos" field.
func (m *SolutionMutation) SetPhotos(s []string) {
	m.photos = &s
	m.appendphotos = nil
}

// Photos returns the value of the "photos" field in the mutation.
func (m *SolutionMutation) Photos() (r []string, exists bool) {
	v := m.photos
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotos returns the old "photos" field's value of the Solution entity.
// If the Solution object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SolutionMutation) OldPhotos(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotos is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotos requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotos: %w", err)
	}
	return oldValue.Photos, nil
}

// AppendPhotos adds s to the "photos" field.
func (m *SolutionMutation) AppendPhotos(s []string) {
	m.appendphotos = append(m.appendphotos, s...)
}

// AppendedPhotos returns the list of values that were appended to the "photos" field in this mutation.
func (m *SolutionMutation) AppendedPhotos() ([]string, bool) {
	if len(m.appendphotos) == 0 {
		return nil, false
	}
	return m.appendphotos, true
}

// ResetPhotos resets all changes to the "photos" field.
func (m *SolutionMutation) ResetPhotos() {
	m.photos = nil
	m.appendphotos = nil
}

// SetDescription sets the "description" field.
func (m *SolutionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *SolutionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Solution entity.
// If the Solution object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SolutionMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *SolutionMutation) ResetDescription() {
	m.description = nil
}

// SetIngredients sets the "ingredients" field.
func (m *SolutionMutation) SetIngredients(s []string) {
	m.ingredients = &s
	m.appendingredients = nil
}

// Ingredients returns the value of the "ingredients" field in the mutation.
func (m *SolutionMutation) Ingredients() (r []string, exists bool) {
	v := m.ingredients
	if v == nil {
		return
	}
	return *v, true
}

// OldIngredients returns the old "ingredients" field's value of the Solution entity.
// If the Solution object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SolutionMutation) OldIngredients(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIngredients is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIngredients requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIngredients: %w", err)
	}
	return oldValue.Ingredients, nil
}

// AppendIngredients adds s to the "ingredients" field.
func (m *SolutionMutation) AppendIngredients(s []string) {
	m.appendingredients = append(m.appendingredients, s...)
}

// AppendedIngredients returns the list of values that were appended to the "ingredients" field in this mutation.
func (m *SolutionMutation) AppendedIngredients() ([]string, bool) {
	if len(m.appendingredients) == 0 {
		return nil, false
	}
	return m.appendingredients, true
}

// ResetIngredients resets all changes to the "ingredients" field.
func (m *SolutionMutation) ResetIngredients() {
	m.ingredients = nil
	m.appendingredients = nil
}

// AddDiseaseIDs adds the "disease" edge to the Disease entity by ids.
func (m *SolutionMutation) AddDiseaseIDs(ids ...uuid.UUID) {
	if m.disease == nil {
		m.disease = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.disease[ids[i]] = struct{}{}
	}
}

// ClearDisease clears the "disease" edge to the Disease entity.
func (m *SolutionMutation) ClearDisease() {
	m.cleareddisease = true
}

// DiseaseCleared reports if the "disease" edge to the Disease entity was cleared.
func (m *SolutionMutation) DiseaseCleared() bool {
	return m.cleareddisease
}

// RemoveDiseaseIDs removes the "disease" edge to the Disease entity by IDs.
func (m *SolutionMutation) RemoveDiseaseIDs(ids ...uuid.UUID) {
	if m.removeddisease == nil {
		m.removeddisease = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.disease, ids[i])
		m.removeddisease[ids[i]] = struct{}{}
	}
}

// RemovedDisease returns the removed IDs of the "disease" edge to the Disease entity.
func (m *SolutionMutation) RemovedDiseaseIDs() (ids []uuid.UUID) {
	for id := range m.removeddisease {
		ids = append(ids, id)
	}
	return
}

// DiseaseIDs returns the "disease" edge IDs in the mutation.
func (m *SolutionMutation) DiseaseIDs() (ids []uuid.UUID) {
	for id := range m.disease {
		ids = append(ids, id)
	}
	return
}

// ResetDisease resets all changes to the "disease" edge.
func (m *SolutionMutation) ResetDisease() {
	m.disease = nil
	m.cleareddisease = false
	m.removeddisease = nil
}

// Where appends a list predicates to the SolutionMutation builder.
func (m *SolutionMutation) Where(ps ...predicate.Solution) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SolutionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SolutionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Solution, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SolutionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SolutionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Solution).
func (m *SolutionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SolutionMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, solution.FieldName)
	}
	if m.photos != nil {
		fields = append(fields, solution.FieldPhotos)
	}
	if m.description != nil {
		fields = append(fields, solution.FieldDescription)
	}
	if m.ingredients != nil {
		fields = append(fields, solution.FieldIngredients)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SolutionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case solution.FieldName:
		return m.Name()
	case solution.FieldPhotos:
		return m.Photos()
	case solution.FieldDescription:
		return m.Description()
	case solution.FieldIngredients:
		return m.Ingredients()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SolutionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case solution.FieldName:
		return m.OldName(ctx)
	case solution.FieldPhotos:
		return m.OldPhotos(ctx)
	case solution.FieldDescription:
		return m.OldDescription(ctx)
	case solution.FieldIngredients:
		return m.OldIngredients(ctx)
	}
	return nil, fmt.Errorf("unknown Solution field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SolutionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case solution.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case solution.FieldPhotos:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotos(v)
		return nil
	case solution.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case solution.FieldIngredients:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIngredients(v)
		return nil
	}
	return fmt.Errorf("unknown Solution field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SolutionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SolutionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SolutionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Solution numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SolutionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SolutionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SolutionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Solution nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SolutionMutation) ResetField(name string) error {
	switch name {
	case solution.FieldName:
		m.ResetName()
		return nil
	case solution.FieldPhotos:
		m.ResetPhotos()
		return nil
	case solution.FieldDescription:
		m.ResetDescription()
		return nil
	case solution.FieldIngredients:
		m.ResetIngredients()
		return nil
	}
	return fmt.Errorf("unknown Solution field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SolutionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.disease != nil {
		edges = append(edges, solution.EdgeDisease)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SolutionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case solution.EdgeDisease:
		ids := make([]ent.Value, 0, len(m.disease))
		for id := range m.disease {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SolutionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddisease != nil {
		edges = append(edges, solution.EdgeDisease)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SolutionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case solution.EdgeDisease:
		ids := make([]ent.Value, 0, len(m.removeddisease))
		for id := range m.removeddisease {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SolutionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddisease {
		edges = append(edges, solution.EdgeDisease)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SolutionMutation) EdgeCleared(name string) bool {
	switch name {
	case solution.EdgeDisease:
		return m.cleareddisease
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SolutionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Solution unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SolutionMutation) ResetEdge(name string) error {
	switch name {
	case solution.EdgeDisease:
		m.ResetDisease()
		return nil
	}
	return fmt.Errorf("unknown Solution edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                         Op
	typ                        string
	id                         *uuid.UUID
	name                       *string
	email                      *string
	location                   *string
	coord                      *string
	password                   *string
	clearedFields              map[string]struct{}
	diseases_identified        map[uuid.UUID]struct{}
	removeddiseases_identified map[uuid.UUID]struct{}
	cleareddiseases_identified bool
	done                       bool
	oldValue                   func(context.Context) (*User, error)
	predicates                 []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetLocation sets the "location" field.
func (m *UserMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *UserMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ResetLocation resets all changes to the "location" field.
func (m *UserMutation) ResetLocation() {
	m.location = nil
}

// SetCoord sets the "coord" field.
func (m *UserMutation) SetCoord(s string) {
	m.coord = &s
}

// Coord returns the value of the "coord" field in the mutation.
func (m *UserMutation) Coord() (r string, exists bool) {
	v := m.coord
	if v == nil {
		return
	}
	return *v, true
}

// OldCoord returns the old "coord" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCoord(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoord is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoord requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoord: %w", err)
	}
	return oldValue.Coord, nil
}

// ClearCoord clears the value of the "coord" field.
func (m *UserMutation) ClearCoord() {
	m.coord = nil
	m.clearedFields[user.FieldCoord] = struct{}{}
}

// CoordCleared returns if the "coord" field was cleared in this mutation.
func (m *UserMutation) CoordCleared() bool {
	_, ok := m.clearedFields[user.FieldCoord]
	return ok
}

// ResetCoord resets all changes to the "coord" field.
func (m *UserMutation) ResetCoord() {
	m.coord = nil
	delete(m.clearedFields, user.FieldCoord)
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// AddDiseasesIdentifiedIDs adds the "diseases_identified" edge to the DiseaseIdentified entity by ids.
func (m *UserMutation) AddDiseasesIdentifiedIDs(ids ...uuid.UUID) {
	if m.diseases_identified == nil {
		m.diseases_identified = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.diseases_identified[ids[i]] = struct{}{}
	}
}

// ClearDiseasesIdentified clears the "diseases_identified" edge to the DiseaseIdentified entity.
func (m *UserMutation) ClearDiseasesIdentified() {
	m.cleareddiseases_identified = true
}

// DiseasesIdentifiedCleared reports if the "diseases_identified" edge to the DiseaseIdentified entity was cleared.
func (m *UserMutation) DiseasesIdentifiedCleared() bool {
	return m.cleareddiseases_identified
}

// RemoveDiseasesIdentifiedIDs removes the "diseases_identified" edge to the DiseaseIdentified entity by IDs.
func (m *UserMutation) RemoveDiseasesIdentifiedIDs(ids ...uuid.UUID) {
	if m.removeddiseases_identified == nil {
		m.removeddiseases_identified = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.diseases_identified, ids[i])
		m.removeddiseases_identified[ids[i]] = struct{}{}
	}
}

// RemovedDiseasesIdentified returns the removed IDs of the "diseases_identified" edge to the DiseaseIdentified entity.
func (m *UserMutation) RemovedDiseasesIdentifiedIDs() (ids []uuid.UUID) {
	for id := range m.removeddiseases_identified {
		ids = append(ids, id)
	}
	return
}

// DiseasesIdentifiedIDs returns the "diseases_identified" edge IDs in the mutation.
func (m *UserMutation) DiseasesIdentifiedIDs() (ids []uuid.UUID) {
	for id := range m.diseases_identified {
		ids = append(ids, id)
	}
	return
}

// ResetDiseasesIdentified resets all changes to the "diseases_identified" edge.
func (m *UserMutation) ResetDiseasesIdentified() {
	m.diseases_identified = nil
	m.cleareddiseases_identified = false
	m.removeddiseases_identified = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.location != nil {
		fields = append(fields, user.FieldLocation)
	}
	if m.coord != nil {
		fields = append(fields, user.FieldCoord)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldLocation:
		return m.Location()
	case user.FieldCoord:
		return m.Coord()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldLocation:
		return m.OldLocation(ctx)
	case user.FieldCoord:
		return m.OldCoord(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case user.FieldCoord:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoord(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldCoord) {
		fields = append(fields, user.FieldCoord)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldCoord:
		m.ClearCoord()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldLocation:
		m.ResetLocation()
		return nil
	case user.FieldCoord:
		m.ResetCoord()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.diseases_identified != nil {
		edges = append(edges, user.EdgeDiseasesIdentified)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeDiseasesIdentified:
		ids := make([]ent.Value, 0, len(m.diseases_identified))
		for id := range m.diseases_identified {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddiseases_identified != nil {
		edges = append(edges, user.EdgeDiseasesIdentified)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeDiseasesIdentified:
		ids := make([]ent.Value, 0, len(m.removeddiseases_identified))
		for id := range m.removeddiseases_identified {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddiseases_identified {
		edges = append(edges, user.EdgeDiseasesIdentified)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeDiseasesIdentified:
		return m.cleareddiseases_identified
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeDiseasesIdentified:
		m.ResetDiseasesIdentified()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
