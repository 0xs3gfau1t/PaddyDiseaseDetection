// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"segFault/PaddyDiseaseDetection/ent/diseaseidentified"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// DiseaseIdentified is the model entity for the DiseaseIdentified schema.
type DiseaseIdentified struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Severity holds the value of the "severity" field.
	Severity int `json:"severity,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Photos holds the value of the "photos" field.
	Photos []string `json:"photos,omitempty"`
	// Status holds the value of the "status" field.
	Status diseaseidentified.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiseaseIdentifiedQuery when eager-loading is set.
	Edges        DiseaseIdentifiedEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DiseaseIdentifiedEdges holds the relations/edges for other nodes in the graph.
type DiseaseIdentifiedEdges struct {
	// UplodedBy holds the value of the uploded_by edge.
	UplodedBy []*User `json:"uploded_by,omitempty"`
	// Disease holds the value of the disease edge.
	Disease []*Disease `json:"disease,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UplodedByOrErr returns the UplodedBy value or an error if the edge
// was not loaded in eager-loading.
func (e DiseaseIdentifiedEdges) UplodedByOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.UplodedBy, nil
	}
	return nil, &NotLoadedError{edge: "uploded_by"}
}

// DiseaseOrErr returns the Disease value or an error if the edge
// was not loaded in eager-loading.
func (e DiseaseIdentifiedEdges) DiseaseOrErr() ([]*Disease, error) {
	if e.loadedTypes[1] {
		return e.Disease, nil
	}
	return nil, &NotLoadedError{edge: "disease"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DiseaseIdentified) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case diseaseidentified.FieldPhotos:
			values[i] = new([]byte)
		case diseaseidentified.FieldSeverity:
			values[i] = new(sql.NullInt64)
		case diseaseidentified.FieldLocation, diseaseidentified.FieldStatus:
			values[i] = new(sql.NullString)
		case diseaseidentified.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case diseaseidentified.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DiseaseIdentified fields.
func (di *DiseaseIdentified) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case diseaseidentified.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				di.ID = *value
			}
		case diseaseidentified.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				di.Location = value.String
			}
		case diseaseidentified.FieldSeverity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field severity", values[i])
			} else if value.Valid {
				di.Severity = int(value.Int64)
			}
		case diseaseidentified.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				di.CreatedAt = value.Time
			}
		case diseaseidentified.FieldPhotos:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field photos", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &di.Photos); err != nil {
					return fmt.Errorf("unmarshal field photos: %w", err)
				}
			}
		case diseaseidentified.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				di.Status = diseaseidentified.Status(value.String)
			}
		default:
			di.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DiseaseIdentified.
// This includes values selected through modifiers, order, etc.
func (di *DiseaseIdentified) Value(name string) (ent.Value, error) {
	return di.selectValues.Get(name)
}

// QueryUplodedBy queries the "uploded_by" edge of the DiseaseIdentified entity.
func (di *DiseaseIdentified) QueryUplodedBy() *UserQuery {
	return NewDiseaseIdentifiedClient(di.config).QueryUplodedBy(di)
}

// QueryDisease queries the "disease" edge of the DiseaseIdentified entity.
func (di *DiseaseIdentified) QueryDisease() *DiseaseQuery {
	return NewDiseaseIdentifiedClient(di.config).QueryDisease(di)
}

// Update returns a builder for updating this DiseaseIdentified.
// Note that you need to call DiseaseIdentified.Unwrap() before calling this method if this DiseaseIdentified
// was returned from a transaction, and the transaction was committed or rolled back.
func (di *DiseaseIdentified) Update() *DiseaseIdentifiedUpdateOne {
	return NewDiseaseIdentifiedClient(di.config).UpdateOne(di)
}

// Unwrap unwraps the DiseaseIdentified entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (di *DiseaseIdentified) Unwrap() *DiseaseIdentified {
	_tx, ok := di.config.driver.(*txDriver)
	if !ok {
		panic("ent: DiseaseIdentified is not a transactional entity")
	}
	di.config.driver = _tx.drv
	return di
}

// String implements the fmt.Stringer.
func (di *DiseaseIdentified) String() string {
	var builder strings.Builder
	builder.WriteString("DiseaseIdentified(")
	builder.WriteString(fmt.Sprintf("id=%v, ", di.ID))
	builder.WriteString("location=")
	builder.WriteString(di.Location)
	builder.WriteString(", ")
	builder.WriteString("severity=")
	builder.WriteString(fmt.Sprintf("%v", di.Severity))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(di.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("photos=")
	builder.WriteString(fmt.Sprintf("%v", di.Photos))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", di.Status))
	builder.WriteByte(')')
	return builder.String()
}

// DiseaseIdentifieds is a parsable slice of DiseaseIdentified.
type DiseaseIdentifieds []*DiseaseIdentified
