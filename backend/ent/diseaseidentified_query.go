// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"segFault/PaddyDiseaseDetection/ent/disease"
	"segFault/PaddyDiseaseDetection/ent/diseaseidentified"
	"segFault/PaddyDiseaseDetection/ent/predicate"
	"segFault/PaddyDiseaseDetection/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DiseaseIdentifiedQuery is the builder for querying DiseaseIdentified entities.
type DiseaseIdentifiedQuery struct {
	config
	ctx           *QueryContext
	order         []diseaseidentified.OrderOption
	inters        []Interceptor
	predicates    []predicate.DiseaseIdentified
	withUplodedBy *UserQuery
	withDisease   *DiseaseQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DiseaseIdentifiedQuery builder.
func (diq *DiseaseIdentifiedQuery) Where(ps ...predicate.DiseaseIdentified) *DiseaseIdentifiedQuery {
	diq.predicates = append(diq.predicates, ps...)
	return diq
}

// Limit the number of records to be returned by this query.
func (diq *DiseaseIdentifiedQuery) Limit(limit int) *DiseaseIdentifiedQuery {
	diq.ctx.Limit = &limit
	return diq
}

// Offset to start from.
func (diq *DiseaseIdentifiedQuery) Offset(offset int) *DiseaseIdentifiedQuery {
	diq.ctx.Offset = &offset
	return diq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (diq *DiseaseIdentifiedQuery) Unique(unique bool) *DiseaseIdentifiedQuery {
	diq.ctx.Unique = &unique
	return diq
}

// Order specifies how the records should be ordered.
func (diq *DiseaseIdentifiedQuery) Order(o ...diseaseidentified.OrderOption) *DiseaseIdentifiedQuery {
	diq.order = append(diq.order, o...)
	return diq
}

// QueryUplodedBy chains the current query on the "uploded_by" edge.
func (diq *DiseaseIdentifiedQuery) QueryUplodedBy() *UserQuery {
	query := (&UserClient{config: diq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := diq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := diq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(diseaseidentified.Table, diseaseidentified.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, diseaseidentified.UplodedByTable, diseaseidentified.UplodedByPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(diq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDisease chains the current query on the "disease" edge.
func (diq *DiseaseIdentifiedQuery) QueryDisease() *DiseaseQuery {
	query := (&DiseaseClient{config: diq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := diq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := diq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(diseaseidentified.Table, diseaseidentified.FieldID, selector),
			sqlgraph.To(disease.Table, disease.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, diseaseidentified.DiseaseTable, diseaseidentified.DiseasePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(diq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DiseaseIdentified entity from the query.
// Returns a *NotFoundError when no DiseaseIdentified was found.
func (diq *DiseaseIdentifiedQuery) First(ctx context.Context) (*DiseaseIdentified, error) {
	nodes, err := diq.Limit(1).All(setContextOp(ctx, diq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{diseaseidentified.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (diq *DiseaseIdentifiedQuery) FirstX(ctx context.Context) *DiseaseIdentified {
	node, err := diq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DiseaseIdentified ID from the query.
// Returns a *NotFoundError when no DiseaseIdentified ID was found.
func (diq *DiseaseIdentifiedQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = diq.Limit(1).IDs(setContextOp(ctx, diq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{diseaseidentified.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (diq *DiseaseIdentifiedQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := diq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DiseaseIdentified entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DiseaseIdentified entity is found.
// Returns a *NotFoundError when no DiseaseIdentified entities are found.
func (diq *DiseaseIdentifiedQuery) Only(ctx context.Context) (*DiseaseIdentified, error) {
	nodes, err := diq.Limit(2).All(setContextOp(ctx, diq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{diseaseidentified.Label}
	default:
		return nil, &NotSingularError{diseaseidentified.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (diq *DiseaseIdentifiedQuery) OnlyX(ctx context.Context) *DiseaseIdentified {
	node, err := diq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DiseaseIdentified ID in the query.
// Returns a *NotSingularError when more than one DiseaseIdentified ID is found.
// Returns a *NotFoundError when no entities are found.
func (diq *DiseaseIdentifiedQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = diq.Limit(2).IDs(setContextOp(ctx, diq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{diseaseidentified.Label}
	default:
		err = &NotSingularError{diseaseidentified.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (diq *DiseaseIdentifiedQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := diq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DiseaseIdentifieds.
func (diq *DiseaseIdentifiedQuery) All(ctx context.Context) ([]*DiseaseIdentified, error) {
	ctx = setContextOp(ctx, diq.ctx, "All")
	if err := diq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DiseaseIdentified, *DiseaseIdentifiedQuery]()
	return withInterceptors[[]*DiseaseIdentified](ctx, diq, qr, diq.inters)
}

// AllX is like All, but panics if an error occurs.
func (diq *DiseaseIdentifiedQuery) AllX(ctx context.Context) []*DiseaseIdentified {
	nodes, err := diq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DiseaseIdentified IDs.
func (diq *DiseaseIdentifiedQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if diq.ctx.Unique == nil && diq.path != nil {
		diq.Unique(true)
	}
	ctx = setContextOp(ctx, diq.ctx, "IDs")
	if err = diq.Select(diseaseidentified.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (diq *DiseaseIdentifiedQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := diq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (diq *DiseaseIdentifiedQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, diq.ctx, "Count")
	if err := diq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, diq, querierCount[*DiseaseIdentifiedQuery](), diq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (diq *DiseaseIdentifiedQuery) CountX(ctx context.Context) int {
	count, err := diq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (diq *DiseaseIdentifiedQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, diq.ctx, "Exist")
	switch _, err := diq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (diq *DiseaseIdentifiedQuery) ExistX(ctx context.Context) bool {
	exist, err := diq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DiseaseIdentifiedQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (diq *DiseaseIdentifiedQuery) Clone() *DiseaseIdentifiedQuery {
	if diq == nil {
		return nil
	}
	return &DiseaseIdentifiedQuery{
		config:        diq.config,
		ctx:           diq.ctx.Clone(),
		order:         append([]diseaseidentified.OrderOption{}, diq.order...),
		inters:        append([]Interceptor{}, diq.inters...),
		predicates:    append([]predicate.DiseaseIdentified{}, diq.predicates...),
		withUplodedBy: diq.withUplodedBy.Clone(),
		withDisease:   diq.withDisease.Clone(),
		// clone intermediate query.
		sql:  diq.sql.Clone(),
		path: diq.path,
	}
}

// WithUplodedBy tells the query-builder to eager-load the nodes that are connected to
// the "uploded_by" edge. The optional arguments are used to configure the query builder of the edge.
func (diq *DiseaseIdentifiedQuery) WithUplodedBy(opts ...func(*UserQuery)) *DiseaseIdentifiedQuery {
	query := (&UserClient{config: diq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	diq.withUplodedBy = query
	return diq
}

// WithDisease tells the query-builder to eager-load the nodes that are connected to
// the "disease" edge. The optional arguments are used to configure the query builder of the edge.
func (diq *DiseaseIdentifiedQuery) WithDisease(opts ...func(*DiseaseQuery)) *DiseaseIdentifiedQuery {
	query := (&DiseaseClient{config: diq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	diq.withDisease = query
	return diq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Location string `json:"location,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DiseaseIdentified.Query().
//		GroupBy(diseaseidentified.FieldLocation).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (diq *DiseaseIdentifiedQuery) GroupBy(field string, fields ...string) *DiseaseIdentifiedGroupBy {
	diq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DiseaseIdentifiedGroupBy{build: diq}
	grbuild.flds = &diq.ctx.Fields
	grbuild.label = diseaseidentified.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Location string `json:"location,omitempty"`
//	}
//
//	client.DiseaseIdentified.Query().
//		Select(diseaseidentified.FieldLocation).
//		Scan(ctx, &v)
func (diq *DiseaseIdentifiedQuery) Select(fields ...string) *DiseaseIdentifiedSelect {
	diq.ctx.Fields = append(diq.ctx.Fields, fields...)
	sbuild := &DiseaseIdentifiedSelect{DiseaseIdentifiedQuery: diq}
	sbuild.label = diseaseidentified.Label
	sbuild.flds, sbuild.scan = &diq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DiseaseIdentifiedSelect configured with the given aggregations.
func (diq *DiseaseIdentifiedQuery) Aggregate(fns ...AggregateFunc) *DiseaseIdentifiedSelect {
	return diq.Select().Aggregate(fns...)
}

func (diq *DiseaseIdentifiedQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range diq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, diq); err != nil {
				return err
			}
		}
	}
	for _, f := range diq.ctx.Fields {
		if !diseaseidentified.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if diq.path != nil {
		prev, err := diq.path(ctx)
		if err != nil {
			return err
		}
		diq.sql = prev
	}
	return nil
}

func (diq *DiseaseIdentifiedQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DiseaseIdentified, error) {
	var (
		nodes       = []*DiseaseIdentified{}
		_spec       = diq.querySpec()
		loadedTypes = [2]bool{
			diq.withUplodedBy != nil,
			diq.withDisease != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DiseaseIdentified).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DiseaseIdentified{config: diq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, diq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := diq.withUplodedBy; query != nil {
		if err := diq.loadUplodedBy(ctx, query, nodes,
			func(n *DiseaseIdentified) { n.Edges.UplodedBy = []*User{} },
			func(n *DiseaseIdentified, e *User) { n.Edges.UplodedBy = append(n.Edges.UplodedBy, e) }); err != nil {
			return nil, err
		}
	}
	if query := diq.withDisease; query != nil {
		if err := diq.loadDisease(ctx, query, nodes,
			func(n *DiseaseIdentified) { n.Edges.Disease = []*Disease{} },
			func(n *DiseaseIdentified, e *Disease) { n.Edges.Disease = append(n.Edges.Disease, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (diq *DiseaseIdentifiedQuery) loadUplodedBy(ctx context.Context, query *UserQuery, nodes []*DiseaseIdentified, init func(*DiseaseIdentified), assign func(*DiseaseIdentified, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*DiseaseIdentified)
	nids := make(map[uuid.UUID]map[*DiseaseIdentified]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(diseaseidentified.UplodedByTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(diseaseidentified.UplodedByPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(diseaseidentified.UplodedByPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(diseaseidentified.UplodedByPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*DiseaseIdentified]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "uploded_by" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (diq *DiseaseIdentifiedQuery) loadDisease(ctx context.Context, query *DiseaseQuery, nodes []*DiseaseIdentified, init func(*DiseaseIdentified), assign func(*DiseaseIdentified, *Disease)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*DiseaseIdentified)
	nids := make(map[uuid.UUID]map[*DiseaseIdentified]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(diseaseidentified.DiseaseTable)
		s.Join(joinT).On(s.C(disease.FieldID), joinT.C(diseaseidentified.DiseasePrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(diseaseidentified.DiseasePrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(diseaseidentified.DiseasePrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*DiseaseIdentified]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Disease](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "disease" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (diq *DiseaseIdentifiedQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := diq.querySpec()
	_spec.Node.Columns = diq.ctx.Fields
	if len(diq.ctx.Fields) > 0 {
		_spec.Unique = diq.ctx.Unique != nil && *diq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, diq.driver, _spec)
}

func (diq *DiseaseIdentifiedQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(diseaseidentified.Table, diseaseidentified.Columns, sqlgraph.NewFieldSpec(diseaseidentified.FieldID, field.TypeUUID))
	_spec.From = diq.sql
	if unique := diq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if diq.path != nil {
		_spec.Unique = true
	}
	if fields := diq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, diseaseidentified.FieldID)
		for i := range fields {
			if fields[i] != diseaseidentified.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := diq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := diq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := diq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := diq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (diq *DiseaseIdentifiedQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(diq.driver.Dialect())
	t1 := builder.Table(diseaseidentified.Table)
	columns := diq.ctx.Fields
	if len(columns) == 0 {
		columns = diseaseidentified.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if diq.sql != nil {
		selector = diq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if diq.ctx.Unique != nil && *diq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range diq.predicates {
		p(selector)
	}
	for _, p := range diq.order {
		p(selector)
	}
	if offset := diq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := diq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DiseaseIdentifiedGroupBy is the group-by builder for DiseaseIdentified entities.
type DiseaseIdentifiedGroupBy struct {
	selector
	build *DiseaseIdentifiedQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (digb *DiseaseIdentifiedGroupBy) Aggregate(fns ...AggregateFunc) *DiseaseIdentifiedGroupBy {
	digb.fns = append(digb.fns, fns...)
	return digb
}

// Scan applies the selector query and scans the result into the given value.
func (digb *DiseaseIdentifiedGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, digb.build.ctx, "GroupBy")
	if err := digb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DiseaseIdentifiedQuery, *DiseaseIdentifiedGroupBy](ctx, digb.build, digb, digb.build.inters, v)
}

func (digb *DiseaseIdentifiedGroupBy) sqlScan(ctx context.Context, root *DiseaseIdentifiedQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(digb.fns))
	for _, fn := range digb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*digb.flds)+len(digb.fns))
		for _, f := range *digb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*digb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := digb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DiseaseIdentifiedSelect is the builder for selecting fields of DiseaseIdentified entities.
type DiseaseIdentifiedSelect struct {
	*DiseaseIdentifiedQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dis *DiseaseIdentifiedSelect) Aggregate(fns ...AggregateFunc) *DiseaseIdentifiedSelect {
	dis.fns = append(dis.fns, fns...)
	return dis
}

// Scan applies the selector query and scans the result into the given value.
func (dis *DiseaseIdentifiedSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dis.ctx, "Select")
	if err := dis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DiseaseIdentifiedQuery, *DiseaseIdentifiedSelect](ctx, dis.DiseaseIdentifiedQuery, dis, dis.inters, v)
}

func (dis *DiseaseIdentifiedSelect) sqlScan(ctx context.Context, root *DiseaseIdentifiedQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dis.fns))
	for _, fn := range dis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
