// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"segFault/PaddyDiseaseDetection/ent/disease"
	"segFault/PaddyDiseaseDetection/ent/diseaseidentified"
	"segFault/PaddyDiseaseDetection/ent/predicate"
	"segFault/PaddyDiseaseDetection/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DiseaseIdentifiedUpdate is the builder for updating DiseaseIdentified entities.
type DiseaseIdentifiedUpdate struct {
	config
	hooks    []Hook
	mutation *DiseaseIdentifiedMutation
}

// Where appends a list predicates to the DiseaseIdentifiedUpdate builder.
func (diu *DiseaseIdentifiedUpdate) Where(ps ...predicate.DiseaseIdentified) *DiseaseIdentifiedUpdate {
	diu.mutation.Where(ps...)
	return diu
}

// SetLocation sets the "location" field.
func (diu *DiseaseIdentifiedUpdate) SetLocation(s string) *DiseaseIdentifiedUpdate {
	diu.mutation.SetLocation(s)
	return diu
}

// SetSeverity sets the "severity" field.
func (diu *DiseaseIdentifiedUpdate) SetSeverity(i int) *DiseaseIdentifiedUpdate {
	diu.mutation.ResetSeverity()
	diu.mutation.SetSeverity(i)
	return diu
}

// AddSeverity adds i to the "severity" field.
func (diu *DiseaseIdentifiedUpdate) AddSeverity(i int) *DiseaseIdentifiedUpdate {
	diu.mutation.AddSeverity(i)
	return diu
}

// SetCreatedAt sets the "created_at" field.
func (diu *DiseaseIdentifiedUpdate) SetCreatedAt(t time.Time) *DiseaseIdentifiedUpdate {
	diu.mutation.SetCreatedAt(t)
	return diu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (diu *DiseaseIdentifiedUpdate) SetNillableCreatedAt(t *time.Time) *DiseaseIdentifiedUpdate {
	if t != nil {
		diu.SetCreatedAt(*t)
	}
	return diu
}

// SetPhotos sets the "photos" field.
func (diu *DiseaseIdentifiedUpdate) SetPhotos(s []string) *DiseaseIdentifiedUpdate {
	diu.mutation.SetPhotos(s)
	return diu
}

// AppendPhotos appends s to the "photos" field.
func (diu *DiseaseIdentifiedUpdate) AppendPhotos(s []string) *DiseaseIdentifiedUpdate {
	diu.mutation.AppendPhotos(s)
	return diu
}

// SetStatus sets the "status" field.
func (diu *DiseaseIdentifiedUpdate) SetStatus(d diseaseidentified.Status) *DiseaseIdentifiedUpdate {
	diu.mutation.SetStatus(d)
	return diu
}

// AddUplodedByIDs adds the "uploded_by" edge to the User entity by IDs.
func (diu *DiseaseIdentifiedUpdate) AddUplodedByIDs(ids ...uuid.UUID) *DiseaseIdentifiedUpdate {
	diu.mutation.AddUplodedByIDs(ids...)
	return diu
}

// AddUplodedBy adds the "uploded_by" edges to the User entity.
func (diu *DiseaseIdentifiedUpdate) AddUplodedBy(u ...*User) *DiseaseIdentifiedUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return diu.AddUplodedByIDs(ids...)
}

// AddDiseaseIDs adds the "disease" edge to the Disease entity by IDs.
func (diu *DiseaseIdentifiedUpdate) AddDiseaseIDs(ids ...uuid.UUID) *DiseaseIdentifiedUpdate {
	diu.mutation.AddDiseaseIDs(ids...)
	return diu
}

// AddDisease adds the "disease" edges to the Disease entity.
func (diu *DiseaseIdentifiedUpdate) AddDisease(d ...*Disease) *DiseaseIdentifiedUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return diu.AddDiseaseIDs(ids...)
}

// Mutation returns the DiseaseIdentifiedMutation object of the builder.
func (diu *DiseaseIdentifiedUpdate) Mutation() *DiseaseIdentifiedMutation {
	return diu.mutation
}

// ClearUplodedBy clears all "uploded_by" edges to the User entity.
func (diu *DiseaseIdentifiedUpdate) ClearUplodedBy() *DiseaseIdentifiedUpdate {
	diu.mutation.ClearUplodedBy()
	return diu
}

// RemoveUplodedByIDs removes the "uploded_by" edge to User entities by IDs.
func (diu *DiseaseIdentifiedUpdate) RemoveUplodedByIDs(ids ...uuid.UUID) *DiseaseIdentifiedUpdate {
	diu.mutation.RemoveUplodedByIDs(ids...)
	return diu
}

// RemoveUplodedBy removes "uploded_by" edges to User entities.
func (diu *DiseaseIdentifiedUpdate) RemoveUplodedBy(u ...*User) *DiseaseIdentifiedUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return diu.RemoveUplodedByIDs(ids...)
}

// ClearDisease clears all "disease" edges to the Disease entity.
func (diu *DiseaseIdentifiedUpdate) ClearDisease() *DiseaseIdentifiedUpdate {
	diu.mutation.ClearDisease()
	return diu
}

// RemoveDiseaseIDs removes the "disease" edge to Disease entities by IDs.
func (diu *DiseaseIdentifiedUpdate) RemoveDiseaseIDs(ids ...uuid.UUID) *DiseaseIdentifiedUpdate {
	diu.mutation.RemoveDiseaseIDs(ids...)
	return diu
}

// RemoveDisease removes "disease" edges to Disease entities.
func (diu *DiseaseIdentifiedUpdate) RemoveDisease(d ...*Disease) *DiseaseIdentifiedUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return diu.RemoveDiseaseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (diu *DiseaseIdentifiedUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, diu.sqlSave, diu.mutation, diu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (diu *DiseaseIdentifiedUpdate) SaveX(ctx context.Context) int {
	affected, err := diu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (diu *DiseaseIdentifiedUpdate) Exec(ctx context.Context) error {
	_, err := diu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diu *DiseaseIdentifiedUpdate) ExecX(ctx context.Context) {
	if err := diu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (diu *DiseaseIdentifiedUpdate) check() error {
	if v, ok := diu.mutation.Severity(); ok {
		if err := diseaseidentified.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf(`ent: validator failed for field "DiseaseIdentified.severity": %w`, err)}
		}
	}
	if v, ok := diu.mutation.Status(); ok {
		if err := diseaseidentified.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DiseaseIdentified.status": %w`, err)}
		}
	}
	return nil
}

func (diu *DiseaseIdentifiedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := diu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(diseaseidentified.Table, diseaseidentified.Columns, sqlgraph.NewFieldSpec(diseaseidentified.FieldID, field.TypeUUID))
	if ps := diu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diu.mutation.Location(); ok {
		_spec.SetField(diseaseidentified.FieldLocation, field.TypeString, value)
	}
	if value, ok := diu.mutation.Severity(); ok {
		_spec.SetField(diseaseidentified.FieldSeverity, field.TypeInt, value)
	}
	if value, ok := diu.mutation.AddedSeverity(); ok {
		_spec.AddField(diseaseidentified.FieldSeverity, field.TypeInt, value)
	}
	if value, ok := diu.mutation.CreatedAt(); ok {
		_spec.SetField(diseaseidentified.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := diu.mutation.Photos(); ok {
		_spec.SetField(diseaseidentified.FieldPhotos, field.TypeJSON, value)
	}
	if value, ok := diu.mutation.AppendedPhotos(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, diseaseidentified.FieldPhotos, value)
		})
	}
	if value, ok := diu.mutation.Status(); ok {
		_spec.SetField(diseaseidentified.FieldStatus, field.TypeEnum, value)
	}
	if diu.mutation.UplodedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   diseaseidentified.UplodedByTable,
			Columns: diseaseidentified.UplodedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diu.mutation.RemovedUplodedByIDs(); len(nodes) > 0 && !diu.mutation.UplodedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   diseaseidentified.UplodedByTable,
			Columns: diseaseidentified.UplodedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diu.mutation.UplodedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   diseaseidentified.UplodedByTable,
			Columns: diseaseidentified.UplodedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if diu.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   diseaseidentified.DiseaseTable,
			Columns: diseaseidentified.DiseasePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disease.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diu.mutation.RemovedDiseaseIDs(); len(nodes) > 0 && !diu.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   diseaseidentified.DiseaseTable,
			Columns: diseaseidentified.DiseasePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disease.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diu.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   diseaseidentified.DiseaseTable,
			Columns: diseaseidentified.DiseasePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disease.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, diu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{diseaseidentified.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	diu.mutation.done = true
	return n, nil
}

// DiseaseIdentifiedUpdateOne is the builder for updating a single DiseaseIdentified entity.
type DiseaseIdentifiedUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiseaseIdentifiedMutation
}

// SetLocation sets the "location" field.
func (diuo *DiseaseIdentifiedUpdateOne) SetLocation(s string) *DiseaseIdentifiedUpdateOne {
	diuo.mutation.SetLocation(s)
	return diuo
}

// SetSeverity sets the "severity" field.
func (diuo *DiseaseIdentifiedUpdateOne) SetSeverity(i int) *DiseaseIdentifiedUpdateOne {
	diuo.mutation.ResetSeverity()
	diuo.mutation.SetSeverity(i)
	return diuo
}

// AddSeverity adds i to the "severity" field.
func (diuo *DiseaseIdentifiedUpdateOne) AddSeverity(i int) *DiseaseIdentifiedUpdateOne {
	diuo.mutation.AddSeverity(i)
	return diuo
}

// SetCreatedAt sets the "created_at" field.
func (diuo *DiseaseIdentifiedUpdateOne) SetCreatedAt(t time.Time) *DiseaseIdentifiedUpdateOne {
	diuo.mutation.SetCreatedAt(t)
	return diuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (diuo *DiseaseIdentifiedUpdateOne) SetNillableCreatedAt(t *time.Time) *DiseaseIdentifiedUpdateOne {
	if t != nil {
		diuo.SetCreatedAt(*t)
	}
	return diuo
}

// SetPhotos sets the "photos" field.
func (diuo *DiseaseIdentifiedUpdateOne) SetPhotos(s []string) *DiseaseIdentifiedUpdateOne {
	diuo.mutation.SetPhotos(s)
	return diuo
}

// AppendPhotos appends s to the "photos" field.
func (diuo *DiseaseIdentifiedUpdateOne) AppendPhotos(s []string) *DiseaseIdentifiedUpdateOne {
	diuo.mutation.AppendPhotos(s)
	return diuo
}

// SetStatus sets the "status" field.
func (diuo *DiseaseIdentifiedUpdateOne) SetStatus(d diseaseidentified.Status) *DiseaseIdentifiedUpdateOne {
	diuo.mutation.SetStatus(d)
	return diuo
}

// AddUplodedByIDs adds the "uploded_by" edge to the User entity by IDs.
func (diuo *DiseaseIdentifiedUpdateOne) AddUplodedByIDs(ids ...uuid.UUID) *DiseaseIdentifiedUpdateOne {
	diuo.mutation.AddUplodedByIDs(ids...)
	return diuo
}

// AddUplodedBy adds the "uploded_by" edges to the User entity.
func (diuo *DiseaseIdentifiedUpdateOne) AddUplodedBy(u ...*User) *DiseaseIdentifiedUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return diuo.AddUplodedByIDs(ids...)
}

// AddDiseaseIDs adds the "disease" edge to the Disease entity by IDs.
func (diuo *DiseaseIdentifiedUpdateOne) AddDiseaseIDs(ids ...uuid.UUID) *DiseaseIdentifiedUpdateOne {
	diuo.mutation.AddDiseaseIDs(ids...)
	return diuo
}

// AddDisease adds the "disease" edges to the Disease entity.
func (diuo *DiseaseIdentifiedUpdateOne) AddDisease(d ...*Disease) *DiseaseIdentifiedUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return diuo.AddDiseaseIDs(ids...)
}

// Mutation returns the DiseaseIdentifiedMutation object of the builder.
func (diuo *DiseaseIdentifiedUpdateOne) Mutation() *DiseaseIdentifiedMutation {
	return diuo.mutation
}

// ClearUplodedBy clears all "uploded_by" edges to the User entity.
func (diuo *DiseaseIdentifiedUpdateOne) ClearUplodedBy() *DiseaseIdentifiedUpdateOne {
	diuo.mutation.ClearUplodedBy()
	return diuo
}

// RemoveUplodedByIDs removes the "uploded_by" edge to User entities by IDs.
func (diuo *DiseaseIdentifiedUpdateOne) RemoveUplodedByIDs(ids ...uuid.UUID) *DiseaseIdentifiedUpdateOne {
	diuo.mutation.RemoveUplodedByIDs(ids...)
	return diuo
}

// RemoveUplodedBy removes "uploded_by" edges to User entities.
func (diuo *DiseaseIdentifiedUpdateOne) RemoveUplodedBy(u ...*User) *DiseaseIdentifiedUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return diuo.RemoveUplodedByIDs(ids...)
}

// ClearDisease clears all "disease" edges to the Disease entity.
func (diuo *DiseaseIdentifiedUpdateOne) ClearDisease() *DiseaseIdentifiedUpdateOne {
	diuo.mutation.ClearDisease()
	return diuo
}

// RemoveDiseaseIDs removes the "disease" edge to Disease entities by IDs.
func (diuo *DiseaseIdentifiedUpdateOne) RemoveDiseaseIDs(ids ...uuid.UUID) *DiseaseIdentifiedUpdateOne {
	diuo.mutation.RemoveDiseaseIDs(ids...)
	return diuo
}

// RemoveDisease removes "disease" edges to Disease entities.
func (diuo *DiseaseIdentifiedUpdateOne) RemoveDisease(d ...*Disease) *DiseaseIdentifiedUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return diuo.RemoveDiseaseIDs(ids...)
}

// Where appends a list predicates to the DiseaseIdentifiedUpdate builder.
func (diuo *DiseaseIdentifiedUpdateOne) Where(ps ...predicate.DiseaseIdentified) *DiseaseIdentifiedUpdateOne {
	diuo.mutation.Where(ps...)
	return diuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (diuo *DiseaseIdentifiedUpdateOne) Select(field string, fields ...string) *DiseaseIdentifiedUpdateOne {
	diuo.fields = append([]string{field}, fields...)
	return diuo
}

// Save executes the query and returns the updated DiseaseIdentified entity.
func (diuo *DiseaseIdentifiedUpdateOne) Save(ctx context.Context) (*DiseaseIdentified, error) {
	return withHooks(ctx, diuo.sqlSave, diuo.mutation, diuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (diuo *DiseaseIdentifiedUpdateOne) SaveX(ctx context.Context) *DiseaseIdentified {
	node, err := diuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (diuo *DiseaseIdentifiedUpdateOne) Exec(ctx context.Context) error {
	_, err := diuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diuo *DiseaseIdentifiedUpdateOne) ExecX(ctx context.Context) {
	if err := diuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (diuo *DiseaseIdentifiedUpdateOne) check() error {
	if v, ok := diuo.mutation.Severity(); ok {
		if err := diseaseidentified.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf(`ent: validator failed for field "DiseaseIdentified.severity": %w`, err)}
		}
	}
	if v, ok := diuo.mutation.Status(); ok {
		if err := diseaseidentified.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DiseaseIdentified.status": %w`, err)}
		}
	}
	return nil
}

func (diuo *DiseaseIdentifiedUpdateOne) sqlSave(ctx context.Context) (_node *DiseaseIdentified, err error) {
	if err := diuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(diseaseidentified.Table, diseaseidentified.Columns, sqlgraph.NewFieldSpec(diseaseidentified.FieldID, field.TypeUUID))
	id, ok := diuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DiseaseIdentified.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := diuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, diseaseidentified.FieldID)
		for _, f := range fields {
			if !diseaseidentified.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != diseaseidentified.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := diuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diuo.mutation.Location(); ok {
		_spec.SetField(diseaseidentified.FieldLocation, field.TypeString, value)
	}
	if value, ok := diuo.mutation.Severity(); ok {
		_spec.SetField(diseaseidentified.FieldSeverity, field.TypeInt, value)
	}
	if value, ok := diuo.mutation.AddedSeverity(); ok {
		_spec.AddField(diseaseidentified.FieldSeverity, field.TypeInt, value)
	}
	if value, ok := diuo.mutation.CreatedAt(); ok {
		_spec.SetField(diseaseidentified.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := diuo.mutation.Photos(); ok {
		_spec.SetField(diseaseidentified.FieldPhotos, field.TypeJSON, value)
	}
	if value, ok := diuo.mutation.AppendedPhotos(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, diseaseidentified.FieldPhotos, value)
		})
	}
	if value, ok := diuo.mutation.Status(); ok {
		_spec.SetField(diseaseidentified.FieldStatus, field.TypeEnum, value)
	}
	if diuo.mutation.UplodedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   diseaseidentified.UplodedByTable,
			Columns: diseaseidentified.UplodedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diuo.mutation.RemovedUplodedByIDs(); len(nodes) > 0 && !diuo.mutation.UplodedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   diseaseidentified.UplodedByTable,
			Columns: diseaseidentified.UplodedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diuo.mutation.UplodedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   diseaseidentified.UplodedByTable,
			Columns: diseaseidentified.UplodedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if diuo.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   diseaseidentified.DiseaseTable,
			Columns: diseaseidentified.DiseasePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disease.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diuo.mutation.RemovedDiseaseIDs(); len(nodes) > 0 && !diuo.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   diseaseidentified.DiseaseTable,
			Columns: diseaseidentified.DiseasePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disease.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := diuo.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   diseaseidentified.DiseaseTable,
			Columns: diseaseidentified.DiseasePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disease.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DiseaseIdentified{config: diuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, diuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{diseaseidentified.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	diuo.mutation.done = true
	return _node, nil
}
