// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"segFault/PaddyDiseaseDetection/ent/disease"
	"segFault/PaddyDiseaseDetection/ent/diseaseidentified"
	"segFault/PaddyDiseaseDetection/ent/predicate"
	"segFault/PaddyDiseaseDetection/ent/solution"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DiseaseUpdate is the builder for updating Disease entities.
type DiseaseUpdate struct {
	config
	hooks    []Hook
	mutation *DiseaseMutation
}

// Where appends a list predicates to the DiseaseUpdate builder.
func (du *DiseaseUpdate) Where(ps ...predicate.Disease) *DiseaseUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetName sets the "name" field.
func (du *DiseaseUpdate) SetName(s string) *DiseaseUpdate {
	du.mutation.SetName(s)
	return du
}

// SetPhotos sets the "photos" field.
func (du *DiseaseUpdate) SetPhotos(s []string) *DiseaseUpdate {
	du.mutation.SetPhotos(s)
	return du
}

// AppendPhotos appends s to the "photos" field.
func (du *DiseaseUpdate) AppendPhotos(s []string) *DiseaseUpdate {
	du.mutation.AppendPhotos(s)
	return du
}

// AddSolutionIDs adds the "solutions" edge to the Solution entity by IDs.
func (du *DiseaseUpdate) AddSolutionIDs(ids ...uuid.UUID) *DiseaseUpdate {
	du.mutation.AddSolutionIDs(ids...)
	return du
}

// AddSolutions adds the "solutions" edges to the Solution entity.
func (du *DiseaseUpdate) AddSolutions(s ...*Solution) *DiseaseUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return du.AddSolutionIDs(ids...)
}

// AddDiseaseIdentifiedIDs adds the "disease_identified" edge to the DiseaseIdentified entity by IDs.
func (du *DiseaseUpdate) AddDiseaseIdentifiedIDs(ids ...uuid.UUID) *DiseaseUpdate {
	du.mutation.AddDiseaseIdentifiedIDs(ids...)
	return du
}

// AddDiseaseIdentified adds the "disease_identified" edges to the DiseaseIdentified entity.
func (du *DiseaseUpdate) AddDiseaseIdentified(d ...*DiseaseIdentified) *DiseaseUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddDiseaseIdentifiedIDs(ids...)
}

// Mutation returns the DiseaseMutation object of the builder.
func (du *DiseaseUpdate) Mutation() *DiseaseMutation {
	return du.mutation
}

// ClearSolutions clears all "solutions" edges to the Solution entity.
func (du *DiseaseUpdate) ClearSolutions() *DiseaseUpdate {
	du.mutation.ClearSolutions()
	return du
}

// RemoveSolutionIDs removes the "solutions" edge to Solution entities by IDs.
func (du *DiseaseUpdate) RemoveSolutionIDs(ids ...uuid.UUID) *DiseaseUpdate {
	du.mutation.RemoveSolutionIDs(ids...)
	return du
}

// RemoveSolutions removes "solutions" edges to Solution entities.
func (du *DiseaseUpdate) RemoveSolutions(s ...*Solution) *DiseaseUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return du.RemoveSolutionIDs(ids...)
}

// ClearDiseaseIdentified clears all "disease_identified" edges to the DiseaseIdentified entity.
func (du *DiseaseUpdate) ClearDiseaseIdentified() *DiseaseUpdate {
	du.mutation.ClearDiseaseIdentified()
	return du
}

// RemoveDiseaseIdentifiedIDs removes the "disease_identified" edge to DiseaseIdentified entities by IDs.
func (du *DiseaseUpdate) RemoveDiseaseIdentifiedIDs(ids ...uuid.UUID) *DiseaseUpdate {
	du.mutation.RemoveDiseaseIdentifiedIDs(ids...)
	return du
}

// RemoveDiseaseIdentified removes "disease_identified" edges to DiseaseIdentified entities.
func (du *DiseaseUpdate) RemoveDiseaseIdentified(d ...*DiseaseIdentified) *DiseaseUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveDiseaseIdentifiedIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DiseaseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DiseaseUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DiseaseUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DiseaseUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DiseaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(disease.Table, disease.Columns, sqlgraph.NewFieldSpec(disease.FieldID, field.TypeUUID))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(disease.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.Photos(); ok {
		_spec.SetField(disease.FieldPhotos, field.TypeJSON, value)
	}
	if value, ok := du.mutation.AppendedPhotos(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, disease.FieldPhotos, value)
		})
	}
	if du.mutation.SolutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   disease.SolutionsTable,
			Columns: disease.SolutionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(solution.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedSolutionsIDs(); len(nodes) > 0 && !du.mutation.SolutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   disease.SolutionsTable,
			Columns: disease.SolutionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(solution.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.SolutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   disease.SolutionsTable,
			Columns: disease.SolutionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(solution.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.DiseaseIdentifiedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   disease.DiseaseIdentifiedTable,
			Columns: disease.DiseaseIdentifiedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(diseaseidentified.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedDiseaseIdentifiedIDs(); len(nodes) > 0 && !du.mutation.DiseaseIdentifiedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   disease.DiseaseIdentifiedTable,
			Columns: disease.DiseaseIdentifiedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(diseaseidentified.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DiseaseIdentifiedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   disease.DiseaseIdentifiedTable,
			Columns: disease.DiseaseIdentifiedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(diseaseidentified.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{disease.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DiseaseUpdateOne is the builder for updating a single Disease entity.
type DiseaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiseaseMutation
}

// SetName sets the "name" field.
func (duo *DiseaseUpdateOne) SetName(s string) *DiseaseUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetPhotos sets the "photos" field.
func (duo *DiseaseUpdateOne) SetPhotos(s []string) *DiseaseUpdateOne {
	duo.mutation.SetPhotos(s)
	return duo
}

// AppendPhotos appends s to the "photos" field.
func (duo *DiseaseUpdateOne) AppendPhotos(s []string) *DiseaseUpdateOne {
	duo.mutation.AppendPhotos(s)
	return duo
}

// AddSolutionIDs adds the "solutions" edge to the Solution entity by IDs.
func (duo *DiseaseUpdateOne) AddSolutionIDs(ids ...uuid.UUID) *DiseaseUpdateOne {
	duo.mutation.AddSolutionIDs(ids...)
	return duo
}

// AddSolutions adds the "solutions" edges to the Solution entity.
func (duo *DiseaseUpdateOne) AddSolutions(s ...*Solution) *DiseaseUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return duo.AddSolutionIDs(ids...)
}

// AddDiseaseIdentifiedIDs adds the "disease_identified" edge to the DiseaseIdentified entity by IDs.
func (duo *DiseaseUpdateOne) AddDiseaseIdentifiedIDs(ids ...uuid.UUID) *DiseaseUpdateOne {
	duo.mutation.AddDiseaseIdentifiedIDs(ids...)
	return duo
}

// AddDiseaseIdentified adds the "disease_identified" edges to the DiseaseIdentified entity.
func (duo *DiseaseUpdateOne) AddDiseaseIdentified(d ...*DiseaseIdentified) *DiseaseUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddDiseaseIdentifiedIDs(ids...)
}

// Mutation returns the DiseaseMutation object of the builder.
func (duo *DiseaseUpdateOne) Mutation() *DiseaseMutation {
	return duo.mutation
}

// ClearSolutions clears all "solutions" edges to the Solution entity.
func (duo *DiseaseUpdateOne) ClearSolutions() *DiseaseUpdateOne {
	duo.mutation.ClearSolutions()
	return duo
}

// RemoveSolutionIDs removes the "solutions" edge to Solution entities by IDs.
func (duo *DiseaseUpdateOne) RemoveSolutionIDs(ids ...uuid.UUID) *DiseaseUpdateOne {
	duo.mutation.RemoveSolutionIDs(ids...)
	return duo
}

// RemoveSolutions removes "solutions" edges to Solution entities.
func (duo *DiseaseUpdateOne) RemoveSolutions(s ...*Solution) *DiseaseUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return duo.RemoveSolutionIDs(ids...)
}

// ClearDiseaseIdentified clears all "disease_identified" edges to the DiseaseIdentified entity.
func (duo *DiseaseUpdateOne) ClearDiseaseIdentified() *DiseaseUpdateOne {
	duo.mutation.ClearDiseaseIdentified()
	return duo
}

// RemoveDiseaseIdentifiedIDs removes the "disease_identified" edge to DiseaseIdentified entities by IDs.
func (duo *DiseaseUpdateOne) RemoveDiseaseIdentifiedIDs(ids ...uuid.UUID) *DiseaseUpdateOne {
	duo.mutation.RemoveDiseaseIdentifiedIDs(ids...)
	return duo
}

// RemoveDiseaseIdentified removes "disease_identified" edges to DiseaseIdentified entities.
func (duo *DiseaseUpdateOne) RemoveDiseaseIdentified(d ...*DiseaseIdentified) *DiseaseUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveDiseaseIdentifiedIDs(ids...)
}

// Where appends a list predicates to the DiseaseUpdate builder.
func (duo *DiseaseUpdateOne) Where(ps ...predicate.Disease) *DiseaseUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DiseaseUpdateOne) Select(field string, fields ...string) *DiseaseUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Disease entity.
func (duo *DiseaseUpdateOne) Save(ctx context.Context) (*Disease, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DiseaseUpdateOne) SaveX(ctx context.Context) *Disease {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DiseaseUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DiseaseUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DiseaseUpdateOne) sqlSave(ctx context.Context) (_node *Disease, err error) {
	_spec := sqlgraph.NewUpdateSpec(disease.Table, disease.Columns, sqlgraph.NewFieldSpec(disease.FieldID, field.TypeUUID))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Disease.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, disease.FieldID)
		for _, f := range fields {
			if !disease.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != disease.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(disease.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.Photos(); ok {
		_spec.SetField(disease.FieldPhotos, field.TypeJSON, value)
	}
	if value, ok := duo.mutation.AppendedPhotos(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, disease.FieldPhotos, value)
		})
	}
	if duo.mutation.SolutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   disease.SolutionsTable,
			Columns: disease.SolutionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(solution.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedSolutionsIDs(); len(nodes) > 0 && !duo.mutation.SolutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   disease.SolutionsTable,
			Columns: disease.SolutionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(solution.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.SolutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   disease.SolutionsTable,
			Columns: disease.SolutionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(solution.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.DiseaseIdentifiedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   disease.DiseaseIdentifiedTable,
			Columns: disease.DiseaseIdentifiedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(diseaseidentified.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedDiseaseIdentifiedIDs(); len(nodes) > 0 && !duo.mutation.DiseaseIdentifiedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   disease.DiseaseIdentifiedTable,
			Columns: disease.DiseaseIdentifiedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(diseaseidentified.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DiseaseIdentifiedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   disease.DiseaseIdentifiedTable,
			Columns: disease.DiseaseIdentifiedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(diseaseidentified.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Disease{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{disease.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
