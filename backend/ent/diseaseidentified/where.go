// Code generated by ent, DO NOT EDIT.

package diseaseidentified

import (
	"segFault/PaddyDiseaseDetection/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldLTE(FieldID, id))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldEQ(FieldLocation, v))
}

// Severity applies equality check predicate on the "severity" field. It's identical to SeverityEQ.
func Severity(v int) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldEQ(FieldSeverity, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldEQ(FieldCreatedAt, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldContainsFold(FieldLocation, v))
}

// SeverityEQ applies the EQ predicate on the "severity" field.
func SeverityEQ(v int) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldEQ(FieldSeverity, v))
}

// SeverityNEQ applies the NEQ predicate on the "severity" field.
func SeverityNEQ(v int) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldNEQ(FieldSeverity, v))
}

// SeverityIn applies the In predicate on the "severity" field.
func SeverityIn(vs ...int) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldIn(FieldSeverity, vs...))
}

// SeverityNotIn applies the NotIn predicate on the "severity" field.
func SeverityNotIn(vs ...int) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldNotIn(FieldSeverity, vs...))
}

// SeverityGT applies the GT predicate on the "severity" field.
func SeverityGT(v int) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldGT(FieldSeverity, v))
}

// SeverityGTE applies the GTE predicate on the "severity" field.
func SeverityGTE(v int) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldGTE(FieldSeverity, v))
}

// SeverityLT applies the LT predicate on the "severity" field.
func SeverityLT(v int) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldLT(FieldSeverity, v))
}

// SeverityLTE applies the LTE predicate on the "severity" field.
func SeverityLTE(v int) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldLTE(FieldSeverity, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldLTE(FieldCreatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.FieldNotIn(FieldStatus, vs...))
}

// HasUplodedBy applies the HasEdge predicate on the "uploded_by" edge.
func HasUplodedBy() predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UplodedByTable, UplodedByPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUplodedByWith applies the HasEdge predicate on the "uploded_by" edge with a given conditions (other predicates).
func HasUplodedByWith(preds ...predicate.User) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(func(s *sql.Selector) {
		step := newUplodedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDisease applies the HasEdge predicate on the "disease" edge.
func HasDisease() predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DiseaseTable, DiseasePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDiseaseWith applies the HasEdge predicate on the "disease" edge with a given conditions (other predicates).
func HasDiseaseWith(preds ...predicate.Disease) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(func(s *sql.Selector) {
		step := newDiseaseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DiseaseIdentified) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DiseaseIdentified) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DiseaseIdentified) predicate.DiseaseIdentified {
	return predicate.DiseaseIdentified(sql.NotPredicates(p))
}
