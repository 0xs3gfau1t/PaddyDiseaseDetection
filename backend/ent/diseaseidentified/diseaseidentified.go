// Code generated by ent, DO NOT EDIT.

package diseaseidentified

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the diseaseidentified type in the database.
	Label = "disease_identified"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldSeverity holds the string denoting the severity field in the database.
	FieldSeverity = "severity"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldPhotos holds the string denoting the photos field in the database.
	FieldPhotos = "photos"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeUplodedBy holds the string denoting the uploded_by edge name in mutations.
	EdgeUplodedBy = "uploded_by"
	// EdgeDisease holds the string denoting the disease edge name in mutations.
	EdgeDisease = "disease"
	// Table holds the table name of the diseaseidentified in the database.
	Table = "disease_identifieds"
	// UplodedByTable is the table that holds the uploded_by relation/edge. The primary key declared below.
	UplodedByTable = "user_disease_identified"
	// UplodedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UplodedByInverseTable = "users"
	// DiseaseTable is the table that holds the disease relation/edge. The primary key declared below.
	DiseaseTable = "disease_identified_disease"
	// DiseaseInverseTable is the table name for the Disease entity.
	// It exists in this package in order to avoid circular dependency with the "disease" package.
	DiseaseInverseTable = "diseases"
)

// Columns holds all SQL columns for diseaseidentified fields.
var Columns = []string{
	FieldID,
	FieldLocation,
	FieldSeverity,
	FieldCreatedAt,
	FieldPhotos,
	FieldStatus,
}

var (
	// UplodedByPrimaryKey and UplodedByColumn2 are the table columns denoting the
	// primary key for the uploded_by relation (M2M).
	UplodedByPrimaryKey = []string{"user_id", "disease_identified_id"}
	// DiseasePrimaryKey and DiseaseColumn2 are the table columns denoting the
	// primary key for the disease relation (M2M).
	DiseasePrimaryKey = []string{"disease_identified_id", "disease_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SeverityValidator is a validator for the "severity" field. It is called by the builders before save.
	SeverityValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusProcessing Status = "processing"
	StatusProcessed  Status = "processed"
	StatusQueued     Status = "queued"
	StatusFailed     Status = "failed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusProcessing, StatusProcessed, StatusQueued, StatusFailed:
		return nil
	default:
		return fmt.Errorf("diseaseidentified: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the DiseaseIdentified queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// BySeverity orders the results by the severity field.
func BySeverity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeverity, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByUplodedByCount orders the results by uploded_by count.
func ByUplodedByCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUplodedByStep(), opts...)
	}
}

// ByUplodedBy orders the results by uploded_by terms.
func ByUplodedBy(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUplodedByStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDiseaseCount orders the results by disease count.
func ByDiseaseCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDiseaseStep(), opts...)
	}
}

// ByDisease orders the results by disease terms.
func ByDisease(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDiseaseStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUplodedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UplodedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UplodedByTable, UplodedByPrimaryKey...),
	)
}
func newDiseaseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DiseaseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, DiseaseTable, DiseasePrimaryKey...),
	)
}
