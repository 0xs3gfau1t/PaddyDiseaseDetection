// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"segFault/PaddyDiseaseDetection/ent/disease"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Disease is the model entity for the Disease schema.
type Disease struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Photos holds the value of the "photos" field.
	Photos []string `json:"photos,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiseaseQuery when eager-loading is set.
	Edges        DiseaseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DiseaseEdges holds the relations/edges for other nodes in the graph.
type DiseaseEdges struct {
	// Solutions holds the value of the solutions edge.
	Solutions []*Solution `json:"solutions,omitempty"`
	// DiseaseIdentified holds the value of the disease_identified edge.
	DiseaseIdentified []*DiseaseIdentified `json:"disease_identified,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SolutionsOrErr returns the Solutions value or an error if the edge
// was not loaded in eager-loading.
func (e DiseaseEdges) SolutionsOrErr() ([]*Solution, error) {
	if e.loadedTypes[0] {
		return e.Solutions, nil
	}
	return nil, &NotLoadedError{edge: "solutions"}
}

// DiseaseIdentifiedOrErr returns the DiseaseIdentified value or an error if the edge
// was not loaded in eager-loading.
func (e DiseaseEdges) DiseaseIdentifiedOrErr() ([]*DiseaseIdentified, error) {
	if e.loadedTypes[1] {
		return e.DiseaseIdentified, nil
	}
	return nil, &NotLoadedError{edge: "disease_identified"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Disease) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case disease.FieldPhotos:
			values[i] = new([]byte)
		case disease.FieldName:
			values[i] = new(sql.NullString)
		case disease.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Disease fields.
func (d *Disease) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case disease.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case disease.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case disease.FieldPhotos:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field photos", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Photos); err != nil {
					return fmt.Errorf("unmarshal field photos: %w", err)
				}
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Disease.
// This includes values selected through modifiers, order, etc.
func (d *Disease) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QuerySolutions queries the "solutions" edge of the Disease entity.
func (d *Disease) QuerySolutions() *SolutionQuery {
	return NewDiseaseClient(d.config).QuerySolutions(d)
}

// QueryDiseaseIdentified queries the "disease_identified" edge of the Disease entity.
func (d *Disease) QueryDiseaseIdentified() *DiseaseIdentifiedQuery {
	return NewDiseaseClient(d.config).QueryDiseaseIdentified(d)
}

// Update returns a builder for updating this Disease.
// Note that you need to call Disease.Unwrap() before calling this method if this Disease
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Disease) Update() *DiseaseUpdateOne {
	return NewDiseaseClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Disease entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Disease) Unwrap() *Disease {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Disease is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Disease) String() string {
	var builder strings.Builder
	builder.WriteString("Disease(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("photos=")
	builder.WriteString(fmt.Sprintf("%v", d.Photos))
	builder.WriteByte(')')
	return builder.String()
}

// Diseases is a parsable slice of Disease.
type Diseases []*Disease
