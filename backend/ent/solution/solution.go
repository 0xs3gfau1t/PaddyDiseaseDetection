// Code generated by ent, DO NOT EDIT.

package solution

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the solution type in the database.
	Label = "solution"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPhotos holds the string denoting the photos field in the database.
	FieldPhotos = "photos"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldIngredients holds the string denoting the ingredients field in the database.
	FieldIngredients = "ingredients"
	// EdgeDisease holds the string denoting the disease edge name in mutations.
	EdgeDisease = "disease"
	// Table holds the table name of the solution in the database.
	Table = "solutions"
	// DiseaseTable is the table that holds the disease relation/edge. The primary key declared below.
	DiseaseTable = "disease_solutions"
	// DiseaseInverseTable is the table name for the Disease entity.
	// It exists in this package in order to avoid circular dependency with the "disease" package.
	DiseaseInverseTable = "diseases"
)

// Columns holds all SQL columns for solution fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPhotos,
	FieldDescription,
	FieldIngredients,
}

var (
	// DiseasePrimaryKey and DiseaseColumn2 are the table columns denoting the
	// primary key for the disease relation (M2M).
	DiseasePrimaryKey = []string{"disease_id", "solution_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Solution queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDiseaseCount orders the results by disease count.
func ByDiseaseCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDiseaseStep(), opts...)
	}
}

// ByDisease orders the results by disease terms.
func ByDisease(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDiseaseStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDiseaseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DiseaseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DiseaseTable, DiseasePrimaryKey...),
	)
}
