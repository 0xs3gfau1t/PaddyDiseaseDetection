// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"segFault/PaddyDiseaseDetection/ent/diseaseidentified"
	"segFault/PaddyDiseaseDetection/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DiseaseIdentifiedDelete is the builder for deleting a DiseaseIdentified entity.
type DiseaseIdentifiedDelete struct {
	config
	hooks    []Hook
	mutation *DiseaseIdentifiedMutation
}

// Where appends a list predicates to the DiseaseIdentifiedDelete builder.
func (did *DiseaseIdentifiedDelete) Where(ps ...predicate.DiseaseIdentified) *DiseaseIdentifiedDelete {
	did.mutation.Where(ps...)
	return did
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (did *DiseaseIdentifiedDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, did.sqlExec, did.mutation, did.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (did *DiseaseIdentifiedDelete) ExecX(ctx context.Context) int {
	n, err := did.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (did *DiseaseIdentifiedDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(diseaseidentified.Table, sqlgraph.NewFieldSpec(diseaseidentified.FieldID, field.TypeUUID))
	if ps := did.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, did.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	did.mutation.done = true
	return affected, err
}

// DiseaseIdentifiedDeleteOne is the builder for deleting a single DiseaseIdentified entity.
type DiseaseIdentifiedDeleteOne struct {
	did *DiseaseIdentifiedDelete
}

// Where appends a list predicates to the DiseaseIdentifiedDelete builder.
func (dido *DiseaseIdentifiedDeleteOne) Where(ps ...predicate.DiseaseIdentified) *DiseaseIdentifiedDeleteOne {
	dido.did.mutation.Where(ps...)
	return dido
}

// Exec executes the deletion query.
func (dido *DiseaseIdentifiedDeleteOne) Exec(ctx context.Context) error {
	n, err := dido.did.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{diseaseidentified.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dido *DiseaseIdentifiedDeleteOne) ExecX(ctx context.Context) {
	if err := dido.Exec(ctx); err != nil {
		panic(err)
	}
}
