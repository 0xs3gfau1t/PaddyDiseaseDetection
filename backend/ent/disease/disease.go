// Code generated by ent, DO NOT EDIT.

package disease

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the disease type in the database.
	Label = "disease"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPhotos holds the string denoting the photos field in the database.
	FieldPhotos = "photos"
	// EdgeSolutions holds the string denoting the solutions edge name in mutations.
	EdgeSolutions = "solutions"
	// EdgeDiseaseIdentified holds the string denoting the disease_identified edge name in mutations.
	EdgeDiseaseIdentified = "disease_identified"
	// Table holds the table name of the disease in the database.
	Table = "diseases"
	// SolutionsTable is the table that holds the solutions relation/edge. The primary key declared below.
	SolutionsTable = "disease_solutions"
	// SolutionsInverseTable is the table name for the Solution entity.
	// It exists in this package in order to avoid circular dependency with the "solution" package.
	SolutionsInverseTable = "solutions"
	// DiseaseIdentifiedTable is the table that holds the disease_identified relation/edge. The primary key declared below.
	DiseaseIdentifiedTable = "disease_identified_disease"
	// DiseaseIdentifiedInverseTable is the table name for the DiseaseIdentified entity.
	// It exists in this package in order to avoid circular dependency with the "diseaseidentified" package.
	DiseaseIdentifiedInverseTable = "disease_identifieds"
)

// Columns holds all SQL columns for disease fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPhotos,
}

var (
	// SolutionsPrimaryKey and SolutionsColumn2 are the table columns denoting the
	// primary key for the solutions relation (M2M).
	SolutionsPrimaryKey = []string{"disease_id", "solution_id"}
	// DiseaseIdentifiedPrimaryKey and DiseaseIdentifiedColumn2 are the table columns denoting the
	// primary key for the disease_identified relation (M2M).
	DiseaseIdentifiedPrimaryKey = []string{"disease_identified_id", "disease_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Disease queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySolutionsCount orders the results by solutions count.
func BySolutionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSolutionsStep(), opts...)
	}
}

// BySolutions orders the results by solutions terms.
func BySolutions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSolutionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDiseaseIdentifiedCount orders the results by disease_identified count.
func ByDiseaseIdentifiedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDiseaseIdentifiedStep(), opts...)
	}
}

// ByDiseaseIdentified orders the results by disease_identified terms.
func ByDiseaseIdentified(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDiseaseIdentifiedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSolutionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SolutionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SolutionsTable, SolutionsPrimaryKey...),
	)
}
func newDiseaseIdentifiedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DiseaseIdentifiedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DiseaseIdentifiedTable, DiseaseIdentifiedPrimaryKey...),
	)
}
