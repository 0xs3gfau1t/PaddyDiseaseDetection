// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"segFault/PaddyDiseaseDetection/ent/solution"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Solution is the model entity for the Solution schema.
type Solution struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Photos holds the value of the "photos" field.
	Photos []string `json:"photos,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Ingredients holds the value of the "ingredients" field.
	Ingredients []string `json:"ingredients,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SolutionQuery when eager-loading is set.
	Edges        SolutionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SolutionEdges holds the relations/edges for other nodes in the graph.
type SolutionEdges struct {
	// Disease holds the value of the disease edge.
	Disease []*Disease `json:"disease,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DiseaseOrErr returns the Disease value or an error if the edge
// was not loaded in eager-loading.
func (e SolutionEdges) DiseaseOrErr() ([]*Disease, error) {
	if e.loadedTypes[0] {
		return e.Disease, nil
	}
	return nil, &NotLoadedError{edge: "disease"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Solution) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case solution.FieldPhotos, solution.FieldIngredients:
			values[i] = new([]byte)
		case solution.FieldName, solution.FieldDescription:
			values[i] = new(sql.NullString)
		case solution.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Solution fields.
func (s *Solution) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case solution.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case solution.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case solution.FieldPhotos:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field photos", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Photos); err != nil {
					return fmt.Errorf("unmarshal field photos: %w", err)
				}
			}
		case solution.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case solution.FieldIngredients:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ingredients", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Ingredients); err != nil {
					return fmt.Errorf("unmarshal field ingredients: %w", err)
				}
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Solution.
// This includes values selected through modifiers, order, etc.
func (s *Solution) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryDisease queries the "disease" edge of the Solution entity.
func (s *Solution) QueryDisease() *DiseaseQuery {
	return NewSolutionClient(s.config).QueryDisease(s)
}

// Update returns a builder for updating this Solution.
// Note that you need to call Solution.Unwrap() before calling this method if this Solution
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Solution) Update() *SolutionUpdateOne {
	return NewSolutionClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Solution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Solution) Unwrap() *Solution {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Solution is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Solution) String() string {
	var builder strings.Builder
	builder.WriteString("Solution(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("photos=")
	builder.WriteString(fmt.Sprintf("%v", s.Photos))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	builder.WriteString("ingredients=")
	builder.WriteString(fmt.Sprintf("%v", s.Ingredients))
	builder.WriteByte(')')
	return builder.String()
}

// Solutions is a parsable slice of Solution.
type Solutions []*Solution
