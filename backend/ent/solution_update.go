// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"segFault/PaddyDiseaseDetection/ent/disease"
	"segFault/PaddyDiseaseDetection/ent/predicate"
	"segFault/PaddyDiseaseDetection/ent/solution"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SolutionUpdate is the builder for updating Solution entities.
type SolutionUpdate struct {
	config
	hooks    []Hook
	mutation *SolutionMutation
}

// Where appends a list predicates to the SolutionUpdate builder.
func (su *SolutionUpdate) Where(ps ...predicate.Solution) *SolutionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SolutionUpdate) SetName(s string) *SolutionUpdate {
	su.mutation.SetName(s)
	return su
}

// SetPhotos sets the "photos" field.
func (su *SolutionUpdate) SetPhotos(s []string) *SolutionUpdate {
	su.mutation.SetPhotos(s)
	return su
}

// AppendPhotos appends s to the "photos" field.
func (su *SolutionUpdate) AppendPhotos(s []string) *SolutionUpdate {
	su.mutation.AppendPhotos(s)
	return su
}

// SetDescription sets the "description" field.
func (su *SolutionUpdate) SetDescription(s string) *SolutionUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetIngredients sets the "ingredients" field.
func (su *SolutionUpdate) SetIngredients(s []string) *SolutionUpdate {
	su.mutation.SetIngredients(s)
	return su
}

// AppendIngredients appends s to the "ingredients" field.
func (su *SolutionUpdate) AppendIngredients(s []string) *SolutionUpdate {
	su.mutation.AppendIngredients(s)
	return su
}

// AddDiseaseIDs adds the "disease" edge to the Disease entity by IDs.
func (su *SolutionUpdate) AddDiseaseIDs(ids ...uuid.UUID) *SolutionUpdate {
	su.mutation.AddDiseaseIDs(ids...)
	return su
}

// AddDisease adds the "disease" edges to the Disease entity.
func (su *SolutionUpdate) AddDisease(d ...*Disease) *SolutionUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return su.AddDiseaseIDs(ids...)
}

// Mutation returns the SolutionMutation object of the builder.
func (su *SolutionUpdate) Mutation() *SolutionMutation {
	return su.mutation
}

// ClearDisease clears all "disease" edges to the Disease entity.
func (su *SolutionUpdate) ClearDisease() *SolutionUpdate {
	su.mutation.ClearDisease()
	return su
}

// RemoveDiseaseIDs removes the "disease" edge to Disease entities by IDs.
func (su *SolutionUpdate) RemoveDiseaseIDs(ids ...uuid.UUID) *SolutionUpdate {
	su.mutation.RemoveDiseaseIDs(ids...)
	return su
}

// RemoveDisease removes "disease" edges to Disease entities.
func (su *SolutionUpdate) RemoveDisease(d ...*Disease) *SolutionUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return su.RemoveDiseaseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SolutionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SolutionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SolutionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SolutionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SolutionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(solution.Table, solution.Columns, sqlgraph.NewFieldSpec(solution.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(solution.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Photos(); ok {
		_spec.SetField(solution.FieldPhotos, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedPhotos(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, solution.FieldPhotos, value)
		})
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(solution.FieldDescription, field.TypeString, value)
	}
	if value, ok := su.mutation.Ingredients(); ok {
		_spec.SetField(solution.FieldIngredients, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedIngredients(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, solution.FieldIngredients, value)
		})
	}
	if su.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   solution.DiseaseTable,
			Columns: solution.DiseasePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disease.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedDiseaseIDs(); len(nodes) > 0 && !su.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   solution.DiseaseTable,
			Columns: solution.DiseasePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disease.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   solution.DiseaseTable,
			Columns: solution.DiseasePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disease.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{solution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SolutionUpdateOne is the builder for updating a single Solution entity.
type SolutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SolutionMutation
}

// SetName sets the "name" field.
func (suo *SolutionUpdateOne) SetName(s string) *SolutionUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetPhotos sets the "photos" field.
func (suo *SolutionUpdateOne) SetPhotos(s []string) *SolutionUpdateOne {
	suo.mutation.SetPhotos(s)
	return suo
}

// AppendPhotos appends s to the "photos" field.
func (suo *SolutionUpdateOne) AppendPhotos(s []string) *SolutionUpdateOne {
	suo.mutation.AppendPhotos(s)
	return suo
}

// SetDescription sets the "description" field.
func (suo *SolutionUpdateOne) SetDescription(s string) *SolutionUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetIngredients sets the "ingredients" field.
func (suo *SolutionUpdateOne) SetIngredients(s []string) *SolutionUpdateOne {
	suo.mutation.SetIngredients(s)
	return suo
}

// AppendIngredients appends s to the "ingredients" field.
func (suo *SolutionUpdateOne) AppendIngredients(s []string) *SolutionUpdateOne {
	suo.mutation.AppendIngredients(s)
	return suo
}

// AddDiseaseIDs adds the "disease" edge to the Disease entity by IDs.
func (suo *SolutionUpdateOne) AddDiseaseIDs(ids ...uuid.UUID) *SolutionUpdateOne {
	suo.mutation.AddDiseaseIDs(ids...)
	return suo
}

// AddDisease adds the "disease" edges to the Disease entity.
func (suo *SolutionUpdateOne) AddDisease(d ...*Disease) *SolutionUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return suo.AddDiseaseIDs(ids...)
}

// Mutation returns the SolutionMutation object of the builder.
func (suo *SolutionUpdateOne) Mutation() *SolutionMutation {
	return suo.mutation
}

// ClearDisease clears all "disease" edges to the Disease entity.
func (suo *SolutionUpdateOne) ClearDisease() *SolutionUpdateOne {
	suo.mutation.ClearDisease()
	return suo
}

// RemoveDiseaseIDs removes the "disease" edge to Disease entities by IDs.
func (suo *SolutionUpdateOne) RemoveDiseaseIDs(ids ...uuid.UUID) *SolutionUpdateOne {
	suo.mutation.RemoveDiseaseIDs(ids...)
	return suo
}

// RemoveDisease removes "disease" edges to Disease entities.
func (suo *SolutionUpdateOne) RemoveDisease(d ...*Disease) *SolutionUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return suo.RemoveDiseaseIDs(ids...)
}

// Where appends a list predicates to the SolutionUpdate builder.
func (suo *SolutionUpdateOne) Where(ps ...predicate.Solution) *SolutionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SolutionUpdateOne) Select(field string, fields ...string) *SolutionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Solution entity.
func (suo *SolutionUpdateOne) Save(ctx context.Context) (*Solution, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SolutionUpdateOne) SaveX(ctx context.Context) *Solution {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SolutionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SolutionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SolutionUpdateOne) sqlSave(ctx context.Context) (_node *Solution, err error) {
	_spec := sqlgraph.NewUpdateSpec(solution.Table, solution.Columns, sqlgraph.NewFieldSpec(solution.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Solution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, solution.FieldID)
		for _, f := range fields {
			if !solution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != solution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(solution.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Photos(); ok {
		_spec.SetField(solution.FieldPhotos, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedPhotos(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, solution.FieldPhotos, value)
		})
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(solution.FieldDescription, field.TypeString, value)
	}
	if value, ok := suo.mutation.Ingredients(); ok {
		_spec.SetField(solution.FieldIngredients, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedIngredients(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, solution.FieldIngredients, value)
		})
	}
	if suo.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   solution.DiseaseTable,
			Columns: solution.DiseasePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disease.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedDiseaseIDs(); len(nodes) > 0 && !suo.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   solution.DiseaseTable,
			Columns: solution.DiseasePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disease.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   solution.DiseaseTable,
			Columns: solution.DiseasePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disease.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Solution{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{solution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
