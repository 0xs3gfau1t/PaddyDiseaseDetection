// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"segFault/PaddyDiseaseDetection/ent/disease"
	"segFault/PaddyDiseaseDetection/ent/solution"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SolutionCreate is the builder for creating a Solution entity.
type SolutionCreate struct {
	config
	mutation *SolutionMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sc *SolutionCreate) SetName(s string) *SolutionCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetPhotos sets the "photos" field.
func (sc *SolutionCreate) SetPhotos(s []string) *SolutionCreate {
	sc.mutation.SetPhotos(s)
	return sc
}

// SetDescription sets the "description" field.
func (sc *SolutionCreate) SetDescription(s string) *SolutionCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetIngredients sets the "ingredients" field.
func (sc *SolutionCreate) SetIngredients(s []string) *SolutionCreate {
	sc.mutation.SetIngredients(s)
	return sc
}

// SetID sets the "id" field.
func (sc *SolutionCreate) SetID(u uuid.UUID) *SolutionCreate {
	sc.mutation.SetID(u)
	return sc
}

// AddDiseaseIDs adds the "disease" edge to the Disease entity by IDs.
func (sc *SolutionCreate) AddDiseaseIDs(ids ...uuid.UUID) *SolutionCreate {
	sc.mutation.AddDiseaseIDs(ids...)
	return sc
}

// AddDisease adds the "disease" edges to the Disease entity.
func (sc *SolutionCreate) AddDisease(d ...*Disease) *SolutionCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return sc.AddDiseaseIDs(ids...)
}

// Mutation returns the SolutionMutation object of the builder.
func (sc *SolutionCreate) Mutation() *SolutionMutation {
	return sc.mutation
}

// Save creates the Solution in the database.
func (sc *SolutionCreate) Save(ctx context.Context) (*Solution, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SolutionCreate) SaveX(ctx context.Context) *Solution {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SolutionCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SolutionCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SolutionCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Solution.name"`)}
	}
	if _, ok := sc.mutation.Photos(); !ok {
		return &ValidationError{Name: "photos", err: errors.New(`ent: missing required field "Solution.photos"`)}
	}
	if _, ok := sc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Solution.description"`)}
	}
	if _, ok := sc.mutation.Ingredients(); !ok {
		return &ValidationError{Name: "ingredients", err: errors.New(`ent: missing required field "Solution.ingredients"`)}
	}
	return nil
}

func (sc *SolutionCreate) sqlSave(ctx context.Context) (*Solution, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SolutionCreate) createSpec() (*Solution, *sqlgraph.CreateSpec) {
	var (
		_node = &Solution{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(solution.Table, sqlgraph.NewFieldSpec(solution.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(solution.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Photos(); ok {
		_spec.SetField(solution.FieldPhotos, field.TypeJSON, value)
		_node.Photos = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(solution.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.Ingredients(); ok {
		_spec.SetField(solution.FieldIngredients, field.TypeJSON, value)
		_node.Ingredients = value
	}
	if nodes := sc.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   solution.DiseaseTable,
			Columns: solution.DiseasePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(disease.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SolutionCreateBulk is the builder for creating many Solution entities in bulk.
type SolutionCreateBulk struct {
	config
	err      error
	builders []*SolutionCreate
}

// Save creates the Solution entities in the database.
func (scb *SolutionCreateBulk) Save(ctx context.Context) ([]*Solution, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Solution, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SolutionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SolutionCreateBulk) SaveX(ctx context.Context) []*Solution {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SolutionCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SolutionCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
